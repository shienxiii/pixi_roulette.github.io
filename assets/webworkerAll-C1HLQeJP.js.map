{"version":3,"file":"webworkerAll-C1HLQeJP.js","sources":["../../node_modules/pixi.js/lib/app/ResizePlugin.mjs","../../node_modules/pixi.js/lib/app/TickerPlugin.mjs","../../node_modules/pixi.js/lib/scene/text-bitmap/AbstractBitmapFont.mjs","../../node_modules/pixi.js/lib/scene/text-bitmap/DynamicBitmapFont.mjs","../../node_modules/pixi.js/lib/scene/text-bitmap/utils/getBitmapTextLayout.mjs","../../node_modules/pixi.js/lib/scene/text-bitmap/utils/resolveCharacters.mjs","../../node_modules/pixi.js/lib/scene/text-bitmap/BitmapFontManager.mjs","../../node_modules/pixi.js/lib/filters/FilterPipe.mjs","../../node_modules/pixi.js/lib/scene/container/bounds/getRenderableBounds.mjs","../../node_modules/pixi.js/lib/filters/FilterSystem.mjs","../../node_modules/pixi.js/lib/scene/mesh/shared/MeshGeometry.mjs","../../node_modules/pixi.js/lib/scene/text-html/HTMLTextRenderData.mjs","../../node_modules/pixi.js/lib/scene/text-html/utils/measureHtmlText.mjs","../../node_modules/pixi.js/lib/scene/graphics/shared/GraphicsPipe.mjs","../../node_modules/pixi.js/lib/scene/mesh-plane/PlaneGeometry.mjs","../../node_modules/pixi.js/lib/scene/mesh/shared/BatchableMesh.mjs","../../node_modules/pixi.js/lib/scene/mesh/shared/MeshPipe.mjs","../../node_modules/pixi.js/lib/scene/particle-container/gl/GlParticleContainerAdaptor.mjs","../../node_modules/pixi.js/lib/scene/particle-container/gpu/GpuParticleContainerAdaptor.mjs","../../node_modules/pixi.js/lib/scene/particle-container/shared/utils/createIndicesForQuads.mjs","../../node_modules/pixi.js/lib/scene/particle-container/shared/utils/generateParticleUpdateFunction.mjs","../../node_modules/pixi.js/lib/scene/particle-container/shared/ParticleBuffer.mjs","../../node_modules/pixi.js/lib/scene/particle-container/shared/shader/particles.frag.mjs","../../node_modules/pixi.js/lib/scene/particle-container/shared/shader/particles.vert.mjs","../../node_modules/pixi.js/lib/scene/particle-container/shared/shader/particles.wgsl.mjs","../../node_modules/pixi.js/lib/scene/particle-container/shared/shader/ParticleShader.mjs","../../node_modules/pixi.js/lib/scene/particle-container/shared/ParticleContainerPipe.mjs","../../node_modules/pixi.js/lib/scene/particle-container/shared/GlParticleContainerPipe.mjs","../../node_modules/pixi.js/lib/scene/particle-container/shared/GpuParticleContainerPipe.mjs","../../node_modules/pixi.js/lib/scene/sprite-nine-slice/NineSliceGeometry.mjs","../../node_modules/pixi.js/lib/scene/sprite-nine-slice/NineSliceSpritePipe.mjs","../../node_modules/pixi.js/lib/scene/sprite-tiling/shader/tilingBit.mjs","../../node_modules/pixi.js/lib/scene/sprite-tiling/shader/TilingSpriteShader.mjs","../../node_modules/pixi.js/lib/scene/sprite-tiling/utils/QuadGeometry.mjs","../../node_modules/pixi.js/lib/scene/sprite-tiling/utils/setPositions.mjs","../../node_modules/pixi.js/lib/scene/sprite-tiling/utils/applyMatrix.mjs","../../node_modules/pixi.js/lib/scene/sprite-tiling/utils/setUvs.mjs","../../node_modules/pixi.js/lib/scene/sprite-tiling/TilingSpritePipe.mjs","../../node_modules/pixi.js/lib/scene/text/sdfShader/shader-bits/localUniformMSDFBit.mjs","../../node_modules/pixi.js/lib/scene/text/sdfShader/shader-bits/mSDFBit.mjs","../../node_modules/pixi.js/lib/scene/text/sdfShader/SdfShader.mjs","../../node_modules/pixi.js/lib/scene/text-bitmap/BitmapTextPipe.mjs","../../node_modules/pixi.js/lib/scene/text-html/BatchableHTMLText.mjs","../../node_modules/pixi.js/lib/scene/text/utils/updateTextBounds.mjs","../../node_modules/pixi.js/lib/scene/text-html/HTMLTextPipe.mjs","../../node_modules/pixi.js/lib/utils/browser/isSafari.mjs","../../node_modules/pixi.js/lib/scene/text/utils/getPo2TextureFromSource.mjs","../../node_modules/pixi.js/lib/scene/text-html/utils/extractFontFamilies.mjs","../../node_modules/pixi.js/lib/scene/text-html/utils/loadFontAsBase64.mjs","../../node_modules/pixi.js/lib/scene/text-html/utils/loadFontCSS.mjs","../../node_modules/pixi.js/lib/scene/text-html/utils/getFontCss.mjs","../../node_modules/pixi.js/lib/scene/text-html/utils/getSVGUrl.mjs","../../node_modules/pixi.js/lib/scene/text-html/utils/getTemporaryCanvasFromImage.mjs","../../node_modules/pixi.js/lib/scene/text-html/utils/loadSVGImage.mjs","../../node_modules/pixi.js/lib/scene/text-html/HTMLTextSystem.mjs","../../node_modules/pixi.js/lib/scene/text/canvas/BatchableText.mjs","../../node_modules/pixi.js/lib/scene/text/canvas/CanvasTextPipe.mjs","../../node_modules/pixi.js/lib/scene/text/canvas/CanvasTextSystem.mjs","../../node_modules/pixi.js/lib/app/init.mjs","../../node_modules/pixi.js/lib/scene/graphics/init.mjs","../../node_modules/pixi.js/lib/scene/mesh/init.mjs","../../node_modules/pixi.js/lib/scene/particle-container/init.mjs","../../node_modules/pixi.js/lib/scene/text/init.mjs","../../node_modules/pixi.js/lib/scene/text-bitmap/init.mjs","../../node_modules/pixi.js/lib/scene/text-html/init.mjs","../../node_modules/pixi.js/lib/scene/sprite-tiling/init.mjs","../../node_modules/pixi.js/lib/scene/sprite-nine-slice/init.mjs","../../node_modules/pixi.js/lib/filters/init.mjs"],"sourcesContent":["import { ExtensionType } from '../extensions/Extensions.mjs';\n\n\"use strict\";\nclass ResizePlugin {\n  /**\n   * Initialize the plugin with scope of application instance\n   * @private\n   * @param {object} [options] - See application options\n   */\n  static init(options) {\n    Object.defineProperty(\n      this,\n      \"resizeTo\",\n      {\n        set(dom) {\n          globalThis.removeEventListener(\"resize\", this.queueResize);\n          this._resizeTo = dom;\n          if (dom) {\n            globalThis.addEventListener(\"resize\", this.queueResize);\n            this.resize();\n          }\n        },\n        get() {\n          return this._resizeTo;\n        }\n      }\n    );\n    this.queueResize = () => {\n      if (!this._resizeTo) {\n        return;\n      }\n      this._cancelResize();\n      this._resizeId = requestAnimationFrame(() => this.resize());\n    };\n    this._cancelResize = () => {\n      if (this._resizeId) {\n        cancelAnimationFrame(this._resizeId);\n        this._resizeId = null;\n      }\n    };\n    this.resize = () => {\n      if (!this._resizeTo) {\n        return;\n      }\n      this._cancelResize();\n      let width;\n      let height;\n      if (this._resizeTo === globalThis.window) {\n        width = globalThis.innerWidth;\n        height = globalThis.innerHeight;\n      } else {\n        const { clientWidth, clientHeight } = this._resizeTo;\n        width = clientWidth;\n        height = clientHeight;\n      }\n      this.renderer.resize(width, height);\n      this.render();\n    };\n    this._resizeId = null;\n    this._resizeTo = null;\n    this.resizeTo = options.resizeTo || null;\n  }\n  /**\n   * Clean up the ticker, scoped to application\n   * @private\n   */\n  static destroy() {\n    globalThis.removeEventListener(\"resize\", this.queueResize);\n    this._cancelResize();\n    this._cancelResize = null;\n    this.queueResize = null;\n    this.resizeTo = null;\n    this.resize = null;\n  }\n}\n/** @ignore */\nResizePlugin.extension = ExtensionType.Application;\n\nexport { ResizePlugin };\n//# sourceMappingURL=ResizePlugin.mjs.map\n","import { ExtensionType } from '../extensions/Extensions.mjs';\nimport { UPDATE_PRIORITY } from '../ticker/const.mjs';\nimport { Ticker } from '../ticker/Ticker.mjs';\n\n\"use strict\";\nclass TickerPlugin {\n  /**\n   * Initialize the plugin with scope of application instance\n   * @private\n   * @param {object} [options] - See application options\n   */\n  static init(options) {\n    options = Object.assign({\n      autoStart: true,\n      sharedTicker: false\n    }, options);\n    Object.defineProperty(\n      this,\n      \"ticker\",\n      {\n        set(ticker) {\n          if (this._ticker) {\n            this._ticker.remove(this.render, this);\n          }\n          this._ticker = ticker;\n          if (ticker) {\n            ticker.add(this.render, this, UPDATE_PRIORITY.LOW);\n          }\n        },\n        get() {\n          return this._ticker;\n        }\n      }\n    );\n    this.stop = () => {\n      this._ticker.stop();\n    };\n    this.start = () => {\n      this._ticker.start();\n    };\n    this._ticker = null;\n    this.ticker = options.sharedTicker ? Ticker.shared : new Ticker();\n    if (options.autoStart) {\n      this.start();\n    }\n  }\n  /**\n   * Clean up the ticker, scoped to application.\n   * @private\n   */\n  static destroy() {\n    if (this._ticker) {\n      const oldTicker = this._ticker;\n      this.ticker = null;\n      oldTicker.destroy();\n    }\n  }\n}\n/** @ignore */\nTickerPlugin.extension = ExtensionType.Application;\n\nexport { TickerPlugin };\n//# sourceMappingURL=TickerPlugin.mjs.map\n","import EventEmitter from 'eventemitter3';\nimport { deprecation, v8_0_0 } from '../../utils/logging/deprecation.mjs';\n\n\"use strict\";\nclass AbstractBitmapFont extends EventEmitter {\n  constructor() {\n    super(...arguments);\n    /** The map of characters by character code. */\n    this.chars = /* @__PURE__ */ Object.create(null);\n    /**\n     * The line-height of the font face in pixels.\n     * @type {number}\n     */\n    this.lineHeight = 0;\n    /**\n     * The name of the font face\n     * @type {string}\n     */\n    this.fontFamily = \"\";\n    /** The metrics of the font face. */\n    this.fontMetrics = { fontSize: 0, ascent: 0, descent: 0 };\n    /**\n     * The offset of the font face from the baseline.\n     * @type {number}\n     */\n    this.baseLineOffset = 0;\n    /** The range and type of the distance field for this font. */\n    this.distanceField = { type: \"none\", range: 0 };\n    /** The map of base page textures (i.e., sheets of glyphs). */\n    this.pages = [];\n    /** should the fill for this font be applied as a tint to the text. */\n    this.applyFillAsTint = true;\n    /** The size of the font face in pixels. */\n    this.baseMeasurementFontSize = 100;\n    this.baseRenderedFontSize = 100;\n  }\n  /**\n   * The name of the font face.\n   * @deprecated since 8.0.0 Use `fontFamily` instead.\n   */\n  get font() {\n    deprecation(v8_0_0, \"BitmapFont.font is deprecated, please use BitmapFont.fontFamily instead.\");\n    return this.fontFamily;\n  }\n  /**\n   * The map of base page textures (i.e., sheets of glyphs).\n   * @deprecated since 8.0.0 Use `pages` instead.\n   */\n  get pageTextures() {\n    deprecation(v8_0_0, \"BitmapFont.pageTextures is deprecated, please use BitmapFont.pages instead.\");\n    return this.pages;\n  }\n  /**\n   * The size of the font face in pixels.\n   * @deprecated since 8.0.0 Use `fontMetrics.fontSize` instead.\n   */\n  get size() {\n    deprecation(v8_0_0, \"BitmapFont.size is deprecated, please use BitmapFont.fontMetrics.fontSize instead.\");\n    return this.fontMetrics.fontSize;\n  }\n  /**\n   * The kind of distance field for this font or \"none\".\n   * @deprecated since 8.0.0 Use `distanceField.type` instead.\n   */\n  get distanceFieldRange() {\n    deprecation(v8_0_0, \"BitmapFont.distanceFieldRange is deprecated, please use BitmapFont.distanceField.range instead.\");\n    return this.distanceField.range;\n  }\n  /**\n   * The range of the distance field in pixels.\n   * @deprecated since 8.0.0 Use `distanceField.range` instead.\n   */\n  get distanceFieldType() {\n    deprecation(v8_0_0, \"BitmapFont.distanceFieldType is deprecated, please use BitmapFont.distanceField.type instead.\");\n    return this.distanceField.type;\n  }\n  destroy(destroyTextures = false) {\n    this.emit(\"destroy\", this);\n    this.removeAllListeners();\n    for (const i in this.chars) {\n      this.chars[i].texture?.destroy();\n    }\n    this.chars = null;\n    if (destroyTextures) {\n      this.pages.forEach((page) => page.texture.destroy(true));\n      this.pages = null;\n    }\n  }\n}\n\nexport { AbstractBitmapFont };\n//# sourceMappingURL=AbstractBitmapFont.mjs.map\n","import { Color } from '../../color/Color.mjs';\nimport { Rectangle } from '../../maths/shapes/Rectangle.mjs';\nimport { CanvasPool } from '../../rendering/renderers/shared/texture/CanvasPool.mjs';\nimport { ImageSource } from '../../rendering/renderers/shared/texture/sources/ImageSource.mjs';\nimport { Texture } from '../../rendering/renderers/shared/texture/Texture.mjs';\nimport { TextureStyle } from '../../rendering/renderers/shared/texture/TextureStyle.mjs';\nimport { deprecation, v8_0_0 } from '../../utils/logging/deprecation.mjs';\nimport { CanvasTextMetrics } from '../text/canvas/CanvasTextMetrics.mjs';\nimport { fontStringFromTextStyle } from '../text/canvas/utils/fontStringFromTextStyle.mjs';\nimport { getCanvasFillStyle } from '../text/canvas/utils/getCanvasFillStyle.mjs';\nimport { TextStyle } from '../text/TextStyle.mjs';\nimport { AbstractBitmapFont } from './AbstractBitmapFont.mjs';\n\n\"use strict\";\nconst _DynamicBitmapFont = class _DynamicBitmapFont extends AbstractBitmapFont {\n  /**\n   * @param options - The options for the dynamic bitmap font.\n   */\n  constructor(options) {\n    super();\n    /**\n     * this is a resolution modifier for the font size..\n     * texture resolution will also be used to scale texture according to its font size also\n     */\n    this.resolution = 1;\n    /** The pages of the font. */\n    this.pages = [];\n    this._padding = 0;\n    this._measureCache = /* @__PURE__ */ Object.create(null);\n    this._currentChars = [];\n    this._currentX = 0;\n    this._currentY = 0;\n    this._currentMaxCharHeight = 0;\n    this._currentPageIndex = -1;\n    this._skipKerning = false;\n    const dynamicOptions = { ..._DynamicBitmapFont.defaultOptions, ...options };\n    this._textureSize = dynamicOptions.textureSize;\n    this._mipmap = dynamicOptions.mipmap;\n    const style = dynamicOptions.style.clone();\n    if (dynamicOptions.overrideFill) {\n      style._fill.color = 16777215;\n      style._fill.alpha = 1;\n      style._fill.texture = Texture.WHITE;\n      style._fill.fill = null;\n    }\n    this.applyFillAsTint = dynamicOptions.overrideFill;\n    const requestedFontSize = style.fontSize;\n    style.fontSize = this.baseMeasurementFontSize;\n    const font = fontStringFromTextStyle(style);\n    if (dynamicOptions.overrideSize) {\n      if (style._stroke) {\n        style._stroke.width *= this.baseRenderedFontSize / requestedFontSize;\n      }\n    } else {\n      style.fontSize = this.baseRenderedFontSize = requestedFontSize;\n    }\n    this._style = style;\n    this._skipKerning = dynamicOptions.skipKerning ?? false;\n    this.resolution = dynamicOptions.resolution ?? 1;\n    this._padding = dynamicOptions.padding ?? 4;\n    if (dynamicOptions.textureStyle) {\n      this._textureStyle = dynamicOptions.textureStyle instanceof TextureStyle ? dynamicOptions.textureStyle : new TextureStyle(dynamicOptions.textureStyle);\n    }\n    this.fontMetrics = CanvasTextMetrics.measureFont(font);\n    this.lineHeight = style.lineHeight || this.fontMetrics.fontSize || style.fontSize;\n  }\n  ensureCharacters(chars) {\n    const charList = CanvasTextMetrics.graphemeSegmenter(chars).filter((char) => !this._currentChars.includes(char)).filter((char, index, self) => self.indexOf(char) === index);\n    if (!charList.length)\n      return;\n    this._currentChars = [...this._currentChars, ...charList];\n    let pageData;\n    if (this._currentPageIndex === -1) {\n      pageData = this._nextPage();\n    } else {\n      pageData = this.pages[this._currentPageIndex];\n    }\n    let { canvas, context } = pageData.canvasAndContext;\n    let textureSource = pageData.texture.source;\n    const style = this._style;\n    let currentX = this._currentX;\n    let currentY = this._currentY;\n    let currentMaxCharHeight = this._currentMaxCharHeight;\n    const fontScale = this.baseRenderedFontSize / this.baseMeasurementFontSize;\n    const padding = this._padding * fontScale;\n    let skipTexture = false;\n    const maxTextureWidth = canvas.width / this.resolution;\n    const maxTextureHeight = canvas.height / this.resolution;\n    for (let i = 0; i < charList.length; i++) {\n      const char = charList[i];\n      const metrics = CanvasTextMetrics.measureText(char, style, canvas, false);\n      metrics.lineHeight = metrics.height;\n      const width = metrics.width * fontScale;\n      const textureGlyphWidth = Math.ceil((style.fontStyle === \"italic\" ? 2 : 1) * width);\n      const height = metrics.height * fontScale;\n      const paddedWidth = textureGlyphWidth + padding * 2;\n      const paddedHeight = height + padding * 2;\n      skipTexture = false;\n      if (char !== \"\\n\" && char !== \"\\r\" && char !== \"\t\" && char !== \" \") {\n        skipTexture = true;\n        currentMaxCharHeight = Math.ceil(Math.max(paddedHeight, currentMaxCharHeight));\n      }\n      if (currentX + paddedWidth > maxTextureWidth) {\n        currentY += currentMaxCharHeight;\n        currentMaxCharHeight = paddedHeight;\n        currentX = 0;\n        if (currentY + currentMaxCharHeight > maxTextureHeight) {\n          textureSource.update();\n          const pageData2 = this._nextPage();\n          canvas = pageData2.canvasAndContext.canvas;\n          context = pageData2.canvasAndContext.context;\n          textureSource = pageData2.texture.source;\n          currentX = 0;\n          currentY = 0;\n          currentMaxCharHeight = 0;\n        }\n      }\n      const xAdvance = width / fontScale - (style.dropShadow?.distance ?? 0) - (style._stroke?.width ?? 0);\n      this.chars[char] = {\n        id: char.codePointAt(0),\n        xOffset: -this._padding,\n        yOffset: -this._padding,\n        xAdvance,\n        kerning: {}\n      };\n      if (skipTexture) {\n        this._drawGlyph(\n          context,\n          metrics,\n          currentX + padding,\n          currentY + padding,\n          fontScale,\n          style\n        );\n        const px = textureSource.width * fontScale;\n        const py = textureSource.height * fontScale;\n        const frame = new Rectangle(\n          currentX / px * textureSource.width,\n          currentY / py * textureSource.height,\n          paddedWidth / px * textureSource.width,\n          paddedHeight / py * textureSource.height\n        );\n        this.chars[char].texture = new Texture({\n          source: textureSource,\n          frame\n        });\n        currentX += Math.ceil(paddedWidth);\n      }\n    }\n    textureSource.update();\n    this._currentX = currentX;\n    this._currentY = currentY;\n    this._currentMaxCharHeight = currentMaxCharHeight;\n    this._skipKerning && this._applyKerning(charList, context);\n  }\n  /**\n   * @deprecated since 8.0.0\n   * The map of base page textures (i.e., sheets of glyphs).\n   */\n  get pageTextures() {\n    deprecation(v8_0_0, \"BitmapFont.pageTextures is deprecated, please use BitmapFont.pages instead.\");\n    return this.pages;\n  }\n  _applyKerning(newChars, context) {\n    const measureCache = this._measureCache;\n    for (let i = 0; i < newChars.length; i++) {\n      const first = newChars[i];\n      for (let j = 0; j < this._currentChars.length; j++) {\n        const second = this._currentChars[j];\n        let c1 = measureCache[first];\n        if (!c1)\n          c1 = measureCache[first] = context.measureText(first).width;\n        let c2 = measureCache[second];\n        if (!c2)\n          c2 = measureCache[second] = context.measureText(second).width;\n        let total = context.measureText(first + second).width;\n        let amount = total - (c1 + c2);\n        if (amount) {\n          this.chars[first].kerning[second] = amount;\n        }\n        total = context.measureText(first + second).width;\n        amount = total - (c1 + c2);\n        if (amount) {\n          this.chars[second].kerning[first] = amount;\n        }\n      }\n    }\n  }\n  _nextPage() {\n    this._currentPageIndex++;\n    const textureResolution = this.resolution;\n    const canvasAndContext = CanvasPool.getOptimalCanvasAndContext(\n      this._textureSize,\n      this._textureSize,\n      textureResolution\n    );\n    this._setupContext(canvasAndContext.context, this._style, textureResolution);\n    const resolution = textureResolution * (this.baseRenderedFontSize / this.baseMeasurementFontSize);\n    const texture = new Texture({\n      source: new ImageSource({\n        resource: canvasAndContext.canvas,\n        resolution,\n        alphaMode: \"premultiply-alpha-on-upload\",\n        autoGenerateMipmaps: this._mipmap\n      })\n    });\n    if (this._textureStyle) {\n      texture.source.style = this._textureStyle;\n    }\n    const pageData = {\n      canvasAndContext,\n      texture\n    };\n    this.pages[this._currentPageIndex] = pageData;\n    return pageData;\n  }\n  // canvas style!\n  _setupContext(context, style, resolution) {\n    style.fontSize = this.baseRenderedFontSize;\n    context.scale(resolution, resolution);\n    context.font = fontStringFromTextStyle(style);\n    style.fontSize = this.baseMeasurementFontSize;\n    context.textBaseline = style.textBaseline;\n    const stroke = style._stroke;\n    const strokeThickness = stroke?.width ?? 0;\n    if (stroke) {\n      context.lineWidth = strokeThickness;\n      context.lineJoin = stroke.join;\n      context.miterLimit = stroke.miterLimit;\n      context.strokeStyle = getCanvasFillStyle(stroke, context);\n    }\n    if (style._fill) {\n      context.fillStyle = getCanvasFillStyle(style._fill, context);\n    }\n    if (style.dropShadow) {\n      const shadowOptions = style.dropShadow;\n      const rgb = Color.shared.setValue(shadowOptions.color).toArray();\n      const dropShadowBlur = shadowOptions.blur * resolution;\n      const dropShadowDistance = shadowOptions.distance * resolution;\n      context.shadowColor = `rgba(${rgb[0] * 255},${rgb[1] * 255},${rgb[2] * 255},${shadowOptions.alpha})`;\n      context.shadowBlur = dropShadowBlur;\n      context.shadowOffsetX = Math.cos(shadowOptions.angle) * dropShadowDistance;\n      context.shadowOffsetY = Math.sin(shadowOptions.angle) * dropShadowDistance;\n    } else {\n      context.shadowColor = \"black\";\n      context.shadowBlur = 0;\n      context.shadowOffsetX = 0;\n      context.shadowOffsetY = 0;\n    }\n  }\n  _drawGlyph(context, metrics, x, y, fontScale, style) {\n    const char = metrics.text;\n    const fontProperties = metrics.fontProperties;\n    const stroke = style._stroke;\n    const strokeThickness = (stroke?.width ?? 0) * fontScale;\n    const tx = x + strokeThickness / 2;\n    const ty = y - strokeThickness / 2;\n    const descent = fontProperties.descent * fontScale;\n    const lineHeight = metrics.lineHeight * fontScale;\n    let removeShadow = false;\n    if (style.stroke && strokeThickness) {\n      removeShadow = true;\n      context.strokeText(char, tx, ty + lineHeight - descent);\n    }\n    const { shadowBlur, shadowOffsetX, shadowOffsetY } = context;\n    if (style._fill) {\n      if (removeShadow) {\n        context.shadowBlur = 0;\n        context.shadowOffsetX = 0;\n        context.shadowOffsetY = 0;\n      }\n      context.fillText(char, tx, ty + lineHeight - descent);\n    }\n    if (removeShadow) {\n      context.shadowBlur = shadowBlur;\n      context.shadowOffsetX = shadowOffsetX;\n      context.shadowOffsetY = shadowOffsetY;\n    }\n  }\n  destroy() {\n    super.destroy();\n    for (let i = 0; i < this.pages.length; i++) {\n      const { canvasAndContext, texture } = this.pages[i];\n      CanvasPool.returnCanvasAndContext(canvasAndContext);\n      texture.destroy(true);\n    }\n    this.pages = null;\n  }\n};\n_DynamicBitmapFont.defaultOptions = {\n  textureSize: 512,\n  style: new TextStyle(),\n  mipmap: true\n};\nlet DynamicBitmapFont = _DynamicBitmapFont;\n\nexport { DynamicBitmapFont };\n//# sourceMappingURL=DynamicBitmapFont.mjs.map\n","\"use strict\";\nfunction getBitmapTextLayout(chars, style, font, trimEnd) {\n  const layoutData = {\n    width: 0,\n    height: 0,\n    offsetY: 0,\n    scale: style.fontSize / font.baseMeasurementFontSize,\n    lines: [{\n      width: 0,\n      charPositions: [],\n      spaceWidth: 0,\n      spacesIndex: [],\n      chars: []\n    }]\n  };\n  layoutData.offsetY = font.baseLineOffset;\n  let currentLine = layoutData.lines[0];\n  let previousChar = null;\n  let firstWord = true;\n  const currentWord = {\n    spaceWord: false,\n    width: 0,\n    start: 0,\n    index: 0,\n    // use index to not modify the array as we use it a lot!\n    positions: [],\n    chars: []\n  };\n  const scale = font.baseMeasurementFontSize / style.fontSize;\n  const adjustedLetterSpacing = style.letterSpacing * scale;\n  const adjustedWordWrapWidth = style.wordWrapWidth * scale;\n  const adjustedLineHeight = style.lineHeight ? style.lineHeight * scale : font.lineHeight;\n  const breakWords = style.wordWrap && style.breakWords;\n  const nextWord = (word) => {\n    const start = currentLine.width;\n    for (let j = 0; j < currentWord.index; j++) {\n      const position = word.positions[j];\n      currentLine.chars.push(word.chars[j]);\n      currentLine.charPositions.push(position + start);\n    }\n    currentLine.width += word.width;\n    firstWord = false;\n    currentWord.width = 0;\n    currentWord.index = 0;\n    currentWord.chars.length = 0;\n  };\n  const nextLine = () => {\n    let index = currentLine.chars.length - 1;\n    if (trimEnd) {\n      let lastChar = currentLine.chars[index];\n      while (lastChar === \" \") {\n        currentLine.width -= font.chars[lastChar].xAdvance;\n        lastChar = currentLine.chars[--index];\n      }\n    }\n    layoutData.width = Math.max(layoutData.width, currentLine.width);\n    currentLine = {\n      width: 0,\n      charPositions: [],\n      chars: [],\n      spaceWidth: 0,\n      spacesIndex: []\n    };\n    firstWord = true;\n    layoutData.lines.push(currentLine);\n    layoutData.height += adjustedLineHeight;\n  };\n  const checkIsOverflow = (lineWidth) => lineWidth - adjustedLetterSpacing > adjustedWordWrapWidth;\n  for (let i = 0; i < chars.length + 1; i++) {\n    let char;\n    const isEnd = i === chars.length;\n    if (!isEnd) {\n      char = chars[i];\n    }\n    const charData = font.chars[char] || font.chars[\" \"];\n    const isSpace = /(?:\\s)/.test(char);\n    const isWordBreak = isSpace || char === \"\\r\" || char === \"\\n\" || isEnd;\n    if (isWordBreak) {\n      const addWordToNextLine = !firstWord && style.wordWrap && checkIsOverflow(currentLine.width + currentWord.width);\n      if (addWordToNextLine) {\n        nextLine();\n        nextWord(currentWord);\n        if (!isEnd) {\n          currentLine.charPositions.push(0);\n        }\n      } else {\n        currentWord.start = currentLine.width;\n        nextWord(currentWord);\n        if (!isEnd) {\n          currentLine.charPositions.push(0);\n        }\n      }\n      if (char === \"\\r\" || char === \"\\n\") {\n        nextLine();\n      } else if (!isEnd) {\n        const spaceWidth = charData.xAdvance + (charData.kerning[previousChar] || 0) + adjustedLetterSpacing;\n        currentLine.width += spaceWidth;\n        currentLine.spaceWidth = spaceWidth;\n        currentLine.spacesIndex.push(currentLine.charPositions.length);\n        currentLine.chars.push(char);\n      }\n    } else {\n      const kerning = charData.kerning[previousChar] || 0;\n      const nextCharWidth = charData.xAdvance + kerning + adjustedLetterSpacing;\n      const addWordToNextLine = breakWords && checkIsOverflow(currentLine.width + currentWord.width + nextCharWidth);\n      if (addWordToNextLine) {\n        nextWord(currentWord);\n        nextLine();\n      }\n      currentWord.positions[currentWord.index++] = currentWord.width + kerning;\n      currentWord.chars.push(char);\n      currentWord.width += nextCharWidth;\n    }\n    previousChar = char;\n  }\n  nextLine();\n  if (style.align === \"center\") {\n    alignCenter(layoutData);\n  } else if (style.align === \"right\") {\n    alignRight(layoutData);\n  } else if (style.align === \"justify\") {\n    alignJustify(layoutData);\n  }\n  return layoutData;\n}\nfunction alignCenter(measurementData) {\n  for (let i = 0; i < measurementData.lines.length; i++) {\n    const line = measurementData.lines[i];\n    const offset = measurementData.width / 2 - line.width / 2;\n    for (let j = 0; j < line.charPositions.length; j++) {\n      line.charPositions[j] += offset;\n    }\n  }\n}\nfunction alignRight(measurementData) {\n  for (let i = 0; i < measurementData.lines.length; i++) {\n    const line = measurementData.lines[i];\n    const offset = measurementData.width - line.width;\n    for (let j = 0; j < line.charPositions.length; j++) {\n      line.charPositions[j] += offset;\n    }\n  }\n}\nfunction alignJustify(measurementData) {\n  const width = measurementData.width;\n  for (let i = 0; i < measurementData.lines.length; i++) {\n    const line = measurementData.lines[i];\n    let indy = 0;\n    let spaceIndex = line.spacesIndex[indy++];\n    let offset = 0;\n    const totalSpaces = line.spacesIndex.length;\n    const newSpaceWidth = (width - line.width) / totalSpaces;\n    const spaceWidth = newSpaceWidth;\n    for (let j = 0; j < line.charPositions.length; j++) {\n      if (j === spaceIndex) {\n        spaceIndex = line.spacesIndex[indy++];\n        offset += spaceWidth;\n      }\n      line.charPositions[j] += offset;\n    }\n  }\n}\n\nexport { getBitmapTextLayout };\n//# sourceMappingURL=getBitmapTextLayout.mjs.map\n","\"use strict\";\nfunction resolveCharacters(chars) {\n  if (chars === \"\") {\n    return [];\n  }\n  if (typeof chars === \"string\") {\n    chars = [chars];\n  }\n  const result = [];\n  for (let i = 0, j = chars.length; i < j; i++) {\n    const item = chars[i];\n    if (Array.isArray(item)) {\n      if (item.length !== 2) {\n        throw new Error(`[BitmapFont]: Invalid character range length, expecting 2 got ${item.length}.`);\n      }\n      if (item[0].length === 0 || item[1].length === 0) {\n        throw new Error(\"[BitmapFont]: Invalid character delimiter.\");\n      }\n      const startCode = item[0].charCodeAt(0);\n      const endCode = item[1].charCodeAt(0);\n      if (endCode < startCode) {\n        throw new Error(\"[BitmapFont]: Invalid character range.\");\n      }\n      for (let i2 = startCode, j2 = endCode; i2 <= j2; i2++) {\n        result.push(String.fromCharCode(i2));\n      }\n    } else {\n      result.push(...Array.from(item));\n    }\n  }\n  if (result.length === 0) {\n    throw new Error(\"[BitmapFont]: Empty set when resolving characters.\");\n  }\n  return result;\n}\n\nexport { resolveCharacters };\n//# sourceMappingURL=resolveCharacters.mjs.map\n","import { lru } from 'tiny-lru';\nimport { Cache } from '../../assets/cache/Cache.mjs';\nimport { deprecation, v8_0_0 } from '../../utils/logging/deprecation.mjs';\nimport { warn } from '../../utils/logging/warn.mjs';\nimport { CanvasTextMetrics } from '../text/canvas/CanvasTextMetrics.mjs';\nimport { TextStyle } from '../text/TextStyle.mjs';\nimport { DynamicBitmapFont } from './DynamicBitmapFont.mjs';\nimport { getBitmapTextLayout } from './utils/getBitmapTextLayout.mjs';\nimport { resolveCharacters } from './utils/resolveCharacters.mjs';\n\n\"use strict\";\nlet fontCount = 0;\nclass BitmapFontManagerClass {\n  constructor() {\n    /**\n     * This character set includes all the letters in the alphabet (both lower- and upper- case).\n     * @type {string[][]}\n     * @example\n     * BitmapFont.from('ExampleFont', style, { chars: BitmapFont.ALPHA })\n     */\n    this.ALPHA = [[\"a\", \"z\"], [\"A\", \"Z\"], \" \"];\n    /**\n     * This character set includes all decimal digits (from 0 to 9).\n     * @type {string[][]}\n     * @example\n     * BitmapFont.from('ExampleFont', style, { chars: BitmapFont.NUMERIC })\n     */\n    this.NUMERIC = [[\"0\", \"9\"]];\n    /**\n     * This character set is the union of `BitmapFont.ALPHA` and `BitmapFont.NUMERIC`.\n     * @type {string[][]}\n     */\n    this.ALPHANUMERIC = [[\"a\", \"z\"], [\"A\", \"Z\"], [\"0\", \"9\"], \" \"];\n    /**\n     * This character set consists of all the ASCII table.\n     * @type {string[][]}\n     * @see http://www.asciitable.com/\n     */\n    this.ASCII = [[\" \", \"~\"]];\n    /** Default options for installing a new BitmapFont. */\n    this.defaultOptions = {\n      chars: this.ALPHANUMERIC,\n      resolution: 1,\n      padding: 4,\n      skipKerning: false,\n      textureStyle: null\n    };\n    /** Cache for measured text layouts to avoid recalculating them multiple times. */\n    this.measureCache = lru(1e3);\n  }\n  /**\n   * Get a font for the specified text and style.\n   * @param text - The text to get the font for\n   * @param style - The style to use\n   */\n  getFont(text, style) {\n    let fontFamilyKey = `${style.fontFamily}-bitmap`;\n    let overrideFill = true;\n    if (style._fill.fill && !style._stroke) {\n      fontFamilyKey += style._fill.fill.styleKey;\n      overrideFill = false;\n    } else if (style._stroke || style.dropShadow) {\n      fontFamilyKey = `${style.styleKey}-bitmap`;\n      overrideFill = false;\n    }\n    if (!Cache.has(fontFamilyKey)) {\n      const styleCopy = Object.create(style);\n      styleCopy.lineHeight = 0;\n      const fnt = new DynamicBitmapFont({\n        style: styleCopy,\n        overrideFill,\n        overrideSize: true,\n        ...this.defaultOptions\n      });\n      fontCount++;\n      if (fontCount > 50) {\n        warn(\"BitmapText\", `You have dynamically created ${fontCount} bitmap fonts, this can be inefficient. Try pre installing your font styles using \\`BitmapFont.install({name:\"style1\", style})\\``);\n      }\n      fnt.once(\"destroy\", () => {\n        fontCount--;\n        Cache.remove(fontFamilyKey);\n      });\n      Cache.set(\n        fontFamilyKey,\n        fnt\n      );\n    }\n    const dynamicFont = Cache.get(fontFamilyKey);\n    dynamicFont.ensureCharacters?.(text);\n    return dynamicFont;\n  }\n  /**\n   * Get the layout of a text for the specified style.\n   * @param text - The text to get the layout for\n   * @param style - The style to use\n   * @param trimEnd - Whether to ignore whitespaces at the end of each line\n   */\n  getLayout(text, style, trimEnd = true) {\n    const bitmapFont = this.getFont(text, style);\n    const id = `${text}-${style.styleKey}-${trimEnd}`;\n    if (this.measureCache.has(id)) {\n      return this.measureCache.get(id);\n    }\n    const segments = CanvasTextMetrics.graphemeSegmenter(text);\n    const layoutData = getBitmapTextLayout(segments, style, bitmapFont, trimEnd);\n    this.measureCache.set(id, layoutData);\n    return layoutData;\n  }\n  /**\n   * Measure the text using the specified style.\n   * @param text - The text to measure\n   * @param style - The style to use\n   * @param trimEnd - Whether to ignore whitespaces at the end of each line\n   */\n  measureText(text, style, trimEnd = true) {\n    return this.getLayout(text, style, trimEnd);\n  }\n  // eslint-disable-next-line max-len\n  install(...args) {\n    let options = args[0];\n    if (typeof options === \"string\") {\n      options = {\n        name: options,\n        style: args[1],\n        chars: args[2]?.chars,\n        resolution: args[2]?.resolution,\n        padding: args[2]?.padding,\n        skipKerning: args[2]?.skipKerning\n      };\n      deprecation(v8_0_0, \"BitmapFontManager.install(name, style, options) is deprecated, use BitmapFontManager.install({name, style, ...options})\");\n    }\n    const name = options?.name;\n    if (!name) {\n      throw new Error(\"[BitmapFontManager] Property `name` is required.\");\n    }\n    options = { ...this.defaultOptions, ...options };\n    const textStyle = options.style;\n    const style = textStyle instanceof TextStyle ? textStyle : new TextStyle(textStyle);\n    const overrideFill = options.dynamicFill ?? this._canUseTintForStyle(style);\n    const font = new DynamicBitmapFont({\n      style,\n      overrideFill,\n      skipKerning: options.skipKerning,\n      padding: options.padding,\n      resolution: options.resolution,\n      overrideSize: false,\n      textureStyle: options.textureStyle\n    });\n    const flatChars = resolveCharacters(options.chars);\n    font.ensureCharacters(flatChars.join(\"\"));\n    Cache.set(`${name}-bitmap`, font);\n    font.once(\"destroy\", () => Cache.remove(`${name}-bitmap`));\n    return font;\n  }\n  /**\n   * Uninstalls a bitmap font from the cache.\n   * @param {string} name - The name of the bitmap font to uninstall.\n   */\n  uninstall(name) {\n    const cacheKey = `${name}-bitmap`;\n    const font = Cache.get(cacheKey);\n    if (font) {\n      font.destroy();\n    }\n  }\n  /**\n   * Determines if a style can use tinting instead of baking colors into the bitmap.\n   * Tinting is more efficient as it allows reusing the same bitmap with different colors.\n   * @param style - The text style to evaluate\n   * @returns true if the style can use tinting, false if colors must be baked in\n   * @private\n   */\n  _canUseTintForStyle(style) {\n    return !style._stroke && (!style.dropShadow || style.dropShadow.color === 0) && !style._fill.fill && style._fill.color === 16777215;\n  }\n}\nconst BitmapFontManager = new BitmapFontManagerClass();\n\nexport { BitmapFontManager };\n//# sourceMappingURL=BitmapFontManager.mjs.map\n","import { ExtensionType } from '../extensions/Extensions.mjs';\n\n\"use strict\";\nclass FilterPipe {\n  constructor(renderer) {\n    this._renderer = renderer;\n  }\n  push(filterEffect, container, instructionSet) {\n    const renderPipes = this._renderer.renderPipes;\n    renderPipes.batch.break(instructionSet);\n    instructionSet.add({\n      renderPipeId: \"filter\",\n      canBundle: false,\n      action: \"pushFilter\",\n      container,\n      filterEffect\n    });\n  }\n  pop(_filterEffect, _container, instructionSet) {\n    this._renderer.renderPipes.batch.break(instructionSet);\n    instructionSet.add({\n      renderPipeId: \"filter\",\n      action: \"popFilter\",\n      canBundle: false\n    });\n  }\n  execute(instruction) {\n    if (instruction.action === \"pushFilter\") {\n      this._renderer.filter.push(instruction);\n    } else if (instruction.action === \"popFilter\") {\n      this._renderer.filter.pop();\n    }\n  }\n  destroy() {\n    this._renderer = null;\n  }\n}\nFilterPipe.extension = {\n  type: [\n    ExtensionType.WebGLPipes,\n    ExtensionType.WebGPUPipes,\n    ExtensionType.CanvasPipes\n  ],\n  name: \"filter\"\n};\n\nexport { FilterPipe };\n//# sourceMappingURL=FilterPipe.mjs.map\n","import '../../../maths/index.mjs';\nimport { Matrix } from '../../../maths/matrix/Matrix.mjs';\n\n\"use strict\";\nconst tempProjectionMatrix = new Matrix();\nfunction getGlobalRenderableBounds(renderables, bounds) {\n  bounds.clear();\n  const actualMatrix = bounds.matrix;\n  for (let i = 0; i < renderables.length; i++) {\n    const renderable = renderables[i];\n    if (renderable.globalDisplayStatus < 7) {\n      continue;\n    }\n    const renderGroup = renderable.renderGroup ?? renderable.parentRenderGroup;\n    if (renderGroup?.isCachedAsTexture) {\n      bounds.matrix = tempProjectionMatrix.copyFrom(renderGroup.textureOffsetInverseTransform).append(renderable.worldTransform);\n    } else if (renderGroup?._parentCacheAsTextureRenderGroup) {\n      bounds.matrix = tempProjectionMatrix.copyFrom(renderGroup._parentCacheAsTextureRenderGroup.inverseWorldTransform).append(renderable.groupTransform);\n    } else {\n      bounds.matrix = renderable.worldTransform;\n    }\n    bounds.addBounds(renderable.bounds);\n  }\n  bounds.matrix = actualMatrix;\n  return bounds;\n}\n\nexport { getGlobalRenderableBounds };\n//# sourceMappingURL=getRenderableBounds.mjs.map\n","import { ExtensionType } from '../extensions/Extensions.mjs';\nimport { Matrix } from '../maths/matrix/Matrix.mjs';\nimport { BindGroup } from '../rendering/renderers/gpu/shader/BindGroup.mjs';\nimport { Geometry } from '../rendering/renderers/shared/geometry/Geometry.mjs';\nimport { UniformGroup } from '../rendering/renderers/shared/shader/UniformGroup.mjs';\nimport { Texture } from '../rendering/renderers/shared/texture/Texture.mjs';\nimport { TexturePool } from '../rendering/renderers/shared/texture/TexturePool.mjs';\nimport { RendererType } from '../rendering/renderers/types.mjs';\nimport { Bounds } from '../scene/container/bounds/Bounds.mjs';\nimport { getGlobalRenderableBounds } from '../scene/container/bounds/getRenderableBounds.mjs';\nimport { warn } from '../utils/logging/warn.mjs';\n\n\"use strict\";\nconst quadGeometry = new Geometry({\n  attributes: {\n    aPosition: {\n      buffer: new Float32Array([0, 0, 1, 0, 1, 1, 0, 1]),\n      format: \"float32x2\",\n      stride: 2 * 4,\n      offset: 0\n    }\n  },\n  indexBuffer: new Uint32Array([0, 1, 2, 0, 2, 3])\n});\nclass FilterData {\n  constructor() {\n    /**\n     * Indicates whether the filter should be skipped.\n     * @type {boolean}\n     */\n    this.skip = false;\n    /**\n     * The texture to which the filter is applied.\n     * @type {Texture}\n     */\n    this.inputTexture = null;\n    /**\n     * The back texture used for blending, if required.\n     * @type {Texture | null}\n     */\n    this.backTexture = null;\n    /**\n     * The list of filters to be applied.\n     * @type {Filter[]}\n     */\n    this.filters = null;\n    /**\n     * The bounds of the filter area.\n     * @type {Bounds}\n     */\n    this.bounds = new Bounds();\n    /**\n     * The container to which the filter is applied.\n     * @type {Container}\n     */\n    this.container = null;\n    /**\n     * Indicates whether blending is required for the filter.\n     * @type {boolean}\n     */\n    this.blendRequired = false;\n    /**\n     * The render surface where the output of the filter is rendered.\n     * @type {RenderSurface}\n     */\n    this.outputRenderSurface = null;\n    /**\n     * The global frame of the filter area.\n     * @type {{ x: number, y: number, width: number, height: number }}\n     */\n    this.globalFrame = { x: 0, y: 0, width: 0, height: 0 };\n  }\n}\nclass FilterSystem {\n  constructor(renderer) {\n    this._filterStackIndex = 0;\n    this._filterStack = [];\n    this._filterGlobalUniforms = new UniformGroup({\n      uInputSize: { value: new Float32Array(4), type: \"vec4<f32>\" },\n      uInputPixel: { value: new Float32Array(4), type: \"vec4<f32>\" },\n      uInputClamp: { value: new Float32Array(4), type: \"vec4<f32>\" },\n      uOutputFrame: { value: new Float32Array(4), type: \"vec4<f32>\" },\n      uGlobalFrame: { value: new Float32Array(4), type: \"vec4<f32>\" },\n      uOutputTexture: { value: new Float32Array(4), type: \"vec4<f32>\" }\n    });\n    this._globalFilterBindGroup = new BindGroup({});\n    this.renderer = renderer;\n  }\n  /**\n   * The back texture of the currently active filter. Requires the filter to have `blendRequired` set to true.\n   * @readonly\n   */\n  get activeBackTexture() {\n    return this._activeFilterData?.backTexture;\n  }\n  /**\n   * Pushes a filter instruction onto the filter stack.\n   * @param instruction - The instruction containing the filter effect and container.\n   * @internal\n   */\n  push(instruction) {\n    const renderer = this.renderer;\n    const filters = instruction.filterEffect.filters;\n    const filterData = this._pushFilterData();\n    filterData.skip = false;\n    filterData.filters = filters;\n    filterData.container = instruction.container;\n    filterData.outputRenderSurface = renderer.renderTarget.renderSurface;\n    const colorTextureSource = renderer.renderTarget.renderTarget.colorTexture.source;\n    const rootResolution = colorTextureSource.resolution;\n    const rootAntialias = colorTextureSource.antialias;\n    if (filters.length === 0) {\n      filterData.skip = true;\n      return;\n    }\n    const bounds = filterData.bounds;\n    this._calculateFilterArea(instruction, bounds);\n    this._calculateFilterBounds(filterData, renderer.renderTarget.rootViewPort, rootAntialias, rootResolution, 1);\n    if (filterData.skip) {\n      return;\n    }\n    const previousFilterData = this._getPreviousFilterData();\n    const globalResolution = this._findFilterResolution(rootResolution);\n    let offsetX = 0;\n    let offsetY = 0;\n    if (previousFilterData) {\n      offsetX = previousFilterData.bounds.minX;\n      offsetY = previousFilterData.bounds.minY;\n    }\n    this._calculateGlobalFrame(\n      filterData,\n      offsetX,\n      offsetY,\n      globalResolution,\n      colorTextureSource.width,\n      colorTextureSource.height\n    );\n    this._setupFilterTextures(filterData, bounds, renderer, previousFilterData);\n  }\n  /**\n   * Applies filters to a texture.\n   *\n   * This method takes a texture and a list of filters, applies the filters to the texture,\n   * and returns the resulting texture.\n   * @param {object} params - The parameters for applying filters.\n   * @param {Texture} params.texture - The texture to apply filters to.\n   * @param {Filter[]} params.filters - The filters to apply.\n   * @returns {Texture} The resulting texture after all filters have been applied.\n   * @example\n   *\n   * ```ts\n   * // Create a texture and a list of filters\n   * const texture = new Texture(...);\n   * const filters = [new BlurFilter(), new ColorMatrixFilter()];\n   *\n   * // Apply the filters to the texture\n   * const resultTexture = filterSystem.applyToTexture({ texture, filters });\n   *\n   * // Use the resulting texture\n   * sprite.texture = resultTexture;\n   * ```\n   *\n   * Key Points:\n   * 1. padding is not currently supported here - so clipping may occur with filters that use padding.\n   * 2. If all filters are disabled or skipped, the original texture is returned.\n   */\n  generateFilteredTexture({ texture, filters }) {\n    const filterData = this._pushFilterData();\n    this._activeFilterData = filterData;\n    filterData.skip = false;\n    filterData.filters = filters;\n    const colorTextureSource = texture.source;\n    const rootResolution = colorTextureSource.resolution;\n    const rootAntialias = colorTextureSource.antialias;\n    if (filters.length === 0) {\n      filterData.skip = true;\n      return texture;\n    }\n    const bounds = filterData.bounds;\n    bounds.addRect(texture.frame);\n    this._calculateFilterBounds(filterData, bounds.rectangle, rootAntialias, rootResolution, 0);\n    if (filterData.skip) {\n      return texture;\n    }\n    const globalResolution = rootResolution;\n    const offsetX = 0;\n    const offsetY = 0;\n    this._calculateGlobalFrame(\n      filterData,\n      offsetX,\n      offsetY,\n      globalResolution,\n      colorTextureSource.width,\n      colorTextureSource.height\n    );\n    filterData.outputRenderSurface = TexturePool.getOptimalTexture(\n      bounds.width,\n      bounds.height,\n      filterData.resolution,\n      filterData.antialias\n    );\n    filterData.backTexture = Texture.EMPTY;\n    filterData.inputTexture = texture;\n    const renderer = this.renderer;\n    renderer.renderTarget.finishRenderPass();\n    this._applyFiltersToTexture(filterData, true);\n    const outputTexture = filterData.outputRenderSurface;\n    outputTexture.source.alphaMode = \"premultiplied-alpha\";\n    return outputTexture;\n  }\n  /** @internal */\n  pop() {\n    const renderer = this.renderer;\n    const filterData = this._popFilterData();\n    if (filterData.skip) {\n      return;\n    }\n    renderer.globalUniforms.pop();\n    renderer.renderTarget.finishRenderPass();\n    this._activeFilterData = filterData;\n    this._applyFiltersToTexture(filterData, false);\n    if (filterData.blendRequired) {\n      TexturePool.returnTexture(filterData.backTexture);\n    }\n    TexturePool.returnTexture(filterData.inputTexture);\n  }\n  /**\n   * Copies the last render surface to a texture.\n   * @param lastRenderSurface - The last render surface to copy from.\n   * @param bounds - The bounds of the area to copy.\n   * @param previousBounds - The previous bounds to use for offsetting the copy.\n   */\n  getBackTexture(lastRenderSurface, bounds, previousBounds) {\n    const backgroundResolution = lastRenderSurface.colorTexture.source._resolution;\n    const backTexture = TexturePool.getOptimalTexture(\n      bounds.width,\n      bounds.height,\n      backgroundResolution,\n      false\n    );\n    let x = bounds.minX;\n    let y = bounds.minY;\n    if (previousBounds) {\n      x -= previousBounds.minX;\n      y -= previousBounds.minY;\n    }\n    x = Math.floor(x * backgroundResolution);\n    y = Math.floor(y * backgroundResolution);\n    const width = Math.ceil(bounds.width * backgroundResolution);\n    const height = Math.ceil(bounds.height * backgroundResolution);\n    this.renderer.renderTarget.copyToTexture(\n      lastRenderSurface,\n      backTexture,\n      { x, y },\n      { width, height },\n      { x: 0, y: 0 }\n    );\n    return backTexture;\n  }\n  /**\n   * Applies a filter to a texture.\n   * @param filter - The filter to apply.\n   * @param input - The input texture.\n   * @param output - The output render surface.\n   * @param clear - Whether to clear the output surface before applying the filter.\n   */\n  applyFilter(filter, input, output, clear) {\n    const renderer = this.renderer;\n    const filterData = this._activeFilterData;\n    const outputRenderSurface = filterData.outputRenderSurface;\n    const isFinalTarget = outputRenderSurface === output;\n    const rootResolution = renderer.renderTarget.rootRenderTarget.colorTexture.source._resolution;\n    const resolution = this._findFilterResolution(rootResolution);\n    let offsetX = 0;\n    let offsetY = 0;\n    if (isFinalTarget) {\n      const offset = this._findPreviousFilterOffset();\n      offsetX = offset.x;\n      offsetY = offset.y;\n    }\n    this._updateFilterUniforms(input, output, filterData, offsetX, offsetY, resolution, isFinalTarget, clear);\n    this._setupBindGroupsAndRender(filter, input, renderer);\n  }\n  /**\n   * Multiply _input normalized coordinates_ to this matrix to get _sprite texture normalized coordinates_.\n   *\n   * Use `outputMatrix * vTextureCoord` in the shader.\n   * @param outputMatrix - The matrix to output to.\n   * @param {Sprite} sprite - The sprite to map to.\n   * @returns The mapped matrix.\n   */\n  calculateSpriteMatrix(outputMatrix, sprite) {\n    const data = this._activeFilterData;\n    const mappedMatrix = outputMatrix.set(\n      data.inputTexture._source.width,\n      0,\n      0,\n      data.inputTexture._source.height,\n      data.bounds.minX,\n      data.bounds.minY\n    );\n    const worldTransform = sprite.worldTransform.copyTo(Matrix.shared);\n    const renderGroup = sprite.renderGroup || sprite.parentRenderGroup;\n    if (renderGroup && renderGroup.cacheToLocalTransform) {\n      worldTransform.prepend(renderGroup.cacheToLocalTransform);\n    }\n    worldTransform.invert();\n    mappedMatrix.prepend(worldTransform);\n    mappedMatrix.scale(\n      1 / sprite.texture.orig.width,\n      1 / sprite.texture.orig.height\n    );\n    mappedMatrix.translate(sprite.anchor.x, sprite.anchor.y);\n    return mappedMatrix;\n  }\n  destroy() {\n  }\n  /**\n   * Sets up the bind groups and renders the filter.\n   * @param filter - The filter to apply\n   * @param input - The input texture\n   * @param renderer - The renderer instance\n   */\n  _setupBindGroupsAndRender(filter, input, renderer) {\n    if (renderer.renderPipes.uniformBatch) {\n      const batchUniforms = renderer.renderPipes.uniformBatch.getUboResource(this._filterGlobalUniforms);\n      this._globalFilterBindGroup.setResource(batchUniforms, 0);\n    } else {\n      this._globalFilterBindGroup.setResource(this._filterGlobalUniforms, 0);\n    }\n    this._globalFilterBindGroup.setResource(input.source, 1);\n    this._globalFilterBindGroup.setResource(input.source.style, 2);\n    filter.groups[0] = this._globalFilterBindGroup;\n    renderer.encoder.draw({\n      geometry: quadGeometry,\n      shader: filter,\n      state: filter._state,\n      topology: \"triangle-list\"\n    });\n    if (renderer.type === RendererType.WEBGL) {\n      renderer.renderTarget.finishRenderPass();\n    }\n  }\n  /**\n   * Sets up the filter textures including input texture and back texture if needed.\n   * @param filterData - The filter data to update\n   * @param bounds - The bounds for the texture\n   * @param renderer - The renderer instance\n   * @param previousFilterData - The previous filter data for back texture calculation\n   */\n  _setupFilterTextures(filterData, bounds, renderer, previousFilterData) {\n    filterData.backTexture = Texture.EMPTY;\n    filterData.inputTexture = TexturePool.getOptimalTexture(\n      bounds.width,\n      bounds.height,\n      filterData.resolution,\n      filterData.antialias\n    );\n    if (filterData.blendRequired) {\n      renderer.renderTarget.finishRenderPass();\n      const renderTarget = renderer.renderTarget.getRenderTarget(filterData.outputRenderSurface);\n      filterData.backTexture = this.getBackTexture(renderTarget, bounds, previousFilterData?.bounds);\n    }\n    renderer.renderTarget.bind(filterData.inputTexture, true);\n    renderer.globalUniforms.push({\n      offset: bounds\n    });\n  }\n  /**\n   * Calculates and sets the global frame for the filter.\n   * @param filterData - The filter data to update\n   * @param offsetX - The X offset\n   * @param offsetY - The Y offset\n   * @param globalResolution - The global resolution\n   * @param sourceWidth - The source texture width\n   * @param sourceHeight - The source texture height\n   */\n  _calculateGlobalFrame(filterData, offsetX, offsetY, globalResolution, sourceWidth, sourceHeight) {\n    const globalFrame = filterData.globalFrame;\n    globalFrame.x = offsetX * globalResolution;\n    globalFrame.y = offsetY * globalResolution;\n    globalFrame.width = sourceWidth * globalResolution;\n    globalFrame.height = sourceHeight * globalResolution;\n  }\n  /**\n   * Updates the filter uniforms with the current filter state.\n   * @param input - The input texture\n   * @param output - The output render surface\n   * @param filterData - The current filter data\n   * @param offsetX - The X offset for positioning\n   * @param offsetY - The Y offset for positioning\n   * @param resolution - The current resolution\n   * @param isFinalTarget - Whether this is the final render target\n   * @param clear - Whether to clear the output surface\n   */\n  _updateFilterUniforms(input, output, filterData, offsetX, offsetY, resolution, isFinalTarget, clear) {\n    const uniforms = this._filterGlobalUniforms.uniforms;\n    const outputFrame = uniforms.uOutputFrame;\n    const inputSize = uniforms.uInputSize;\n    const inputPixel = uniforms.uInputPixel;\n    const inputClamp = uniforms.uInputClamp;\n    const globalFrame = uniforms.uGlobalFrame;\n    const outputTexture = uniforms.uOutputTexture;\n    if (isFinalTarget) {\n      outputFrame[0] = filterData.bounds.minX - offsetX;\n      outputFrame[1] = filterData.bounds.minY - offsetY;\n    } else {\n      outputFrame[0] = 0;\n      outputFrame[1] = 0;\n    }\n    outputFrame[2] = input.frame.width;\n    outputFrame[3] = input.frame.height;\n    inputSize[0] = input.source.width;\n    inputSize[1] = input.source.height;\n    inputSize[2] = 1 / inputSize[0];\n    inputSize[3] = 1 / inputSize[1];\n    inputPixel[0] = input.source.pixelWidth;\n    inputPixel[1] = input.source.pixelHeight;\n    inputPixel[2] = 1 / inputPixel[0];\n    inputPixel[3] = 1 / inputPixel[1];\n    inputClamp[0] = 0.5 * inputPixel[2];\n    inputClamp[1] = 0.5 * inputPixel[3];\n    inputClamp[2] = input.frame.width * inputSize[2] - 0.5 * inputPixel[2];\n    inputClamp[3] = input.frame.height * inputSize[3] - 0.5 * inputPixel[3];\n    const rootTexture = this.renderer.renderTarget.rootRenderTarget.colorTexture;\n    globalFrame[0] = offsetX * resolution;\n    globalFrame[1] = offsetY * resolution;\n    globalFrame[2] = rootTexture.source.width * resolution;\n    globalFrame[3] = rootTexture.source.height * resolution;\n    if (output instanceof Texture)\n      output.source.resource = null;\n    const renderTarget = this.renderer.renderTarget.getRenderTarget(output);\n    this.renderer.renderTarget.bind(output, !!clear);\n    if (output instanceof Texture) {\n      outputTexture[0] = output.frame.width;\n      outputTexture[1] = output.frame.height;\n    } else {\n      outputTexture[0] = renderTarget.width;\n      outputTexture[1] = renderTarget.height;\n    }\n    outputTexture[2] = renderTarget.isRoot ? -1 : 1;\n    this._filterGlobalUniforms.update();\n  }\n  /**\n   * Finds the correct resolution by looking back through the filter stack.\n   * @param rootResolution - The fallback root resolution to use\n   * @returns The resolution from the previous filter or root resolution\n   */\n  _findFilterResolution(rootResolution) {\n    let currentIndex = this._filterStackIndex - 1;\n    while (currentIndex > 0 && this._filterStack[currentIndex].skip) {\n      --currentIndex;\n    }\n    return currentIndex > 0 && this._filterStack[currentIndex].inputTexture ? this._filterStack[currentIndex].inputTexture.source._resolution : rootResolution;\n  }\n  /**\n   * Finds the offset from the previous non-skipped filter in the stack.\n   * @returns The offset coordinates from the previous filter\n   */\n  _findPreviousFilterOffset() {\n    let offsetX = 0;\n    let offsetY = 0;\n    let lastIndex = this._filterStackIndex;\n    while (lastIndex > 0) {\n      lastIndex--;\n      const prevFilterData = this._filterStack[lastIndex];\n      if (!prevFilterData.skip) {\n        offsetX = prevFilterData.bounds.minX;\n        offsetY = prevFilterData.bounds.minY;\n        break;\n      }\n    }\n    return { x: offsetX, y: offsetY };\n  }\n  /**\n   * Calculates the filter area bounds based on the instruction type.\n   * @param instruction - The filter instruction\n   * @param bounds - The bounds object to populate\n   */\n  _calculateFilterArea(instruction, bounds) {\n    if (instruction.renderables) {\n      getGlobalRenderableBounds(instruction.renderables, bounds);\n    } else if (instruction.filterEffect.filterArea) {\n      bounds.clear();\n      bounds.addRect(instruction.filterEffect.filterArea);\n      bounds.applyMatrix(instruction.container.worldTransform);\n    } else {\n      instruction.container.getFastGlobalBounds(true, bounds);\n    }\n    if (instruction.container) {\n      const renderGroup = instruction.container.renderGroup || instruction.container.parentRenderGroup;\n      const filterFrameTransform = renderGroup.cacheToLocalTransform;\n      if (filterFrameTransform) {\n        bounds.applyMatrix(filterFrameTransform);\n      }\n    }\n  }\n  _applyFiltersToTexture(filterData, clear) {\n    const inputTexture = filterData.inputTexture;\n    const bounds = filterData.bounds;\n    const filters = filterData.filters;\n    this._globalFilterBindGroup.setResource(inputTexture.source.style, 2);\n    this._globalFilterBindGroup.setResource(filterData.backTexture.source, 3);\n    if (filters.length === 1) {\n      filters[0].apply(this, inputTexture, filterData.outputRenderSurface, clear);\n    } else {\n      let flip = filterData.inputTexture;\n      const tempTexture = TexturePool.getOptimalTexture(\n        bounds.width,\n        bounds.height,\n        flip.source._resolution,\n        false\n      );\n      let flop = tempTexture;\n      let i = 0;\n      for (i = 0; i < filters.length - 1; ++i) {\n        const filter = filters[i];\n        filter.apply(this, flip, flop, true);\n        const t = flip;\n        flip = flop;\n        flop = t;\n      }\n      filters[i].apply(this, flip, filterData.outputRenderSurface, clear);\n      TexturePool.returnTexture(tempTexture);\n    }\n  }\n  _calculateFilterBounds(filterData, viewPort, rootAntialias, rootResolution, paddingMultiplier) {\n    const renderer = this.renderer;\n    const bounds = filterData.bounds;\n    const filters = filterData.filters;\n    let resolution = Infinity;\n    let padding = 0;\n    let antialias = true;\n    let blendRequired = false;\n    let enabled = false;\n    let clipToViewport = true;\n    for (let i = 0; i < filters.length; i++) {\n      const filter = filters[i];\n      resolution = Math.min(resolution, filter.resolution === \"inherit\" ? rootResolution : filter.resolution);\n      padding += filter.padding;\n      if (filter.antialias === \"off\") {\n        antialias = false;\n      } else if (filter.antialias === \"inherit\") {\n        antialias && (antialias = rootAntialias);\n      }\n      if (!filter.clipToViewport) {\n        clipToViewport = false;\n      }\n      const isCompatible = !!(filter.compatibleRenderers & renderer.type);\n      if (!isCompatible) {\n        enabled = false;\n        break;\n      }\n      if (filter.blendRequired && !(renderer.backBuffer?.useBackBuffer ?? true)) {\n        warn(\"Blend filter requires backBuffer on WebGL renderer to be enabled. Set `useBackBuffer: true` in the renderer options.\");\n        enabled = false;\n        break;\n      }\n      enabled = filter.enabled || enabled;\n      blendRequired || (blendRequired = filter.blendRequired);\n    }\n    if (!enabled) {\n      filterData.skip = true;\n      return;\n    }\n    if (clipToViewport) {\n      bounds.fitBounds(0, viewPort.width / rootResolution, 0, viewPort.height / rootResolution);\n    }\n    bounds.scale(resolution).ceil().scale(1 / resolution).pad((padding | 0) * paddingMultiplier);\n    if (!bounds.isPositive) {\n      filterData.skip = true;\n      return;\n    }\n    filterData.antialias = antialias;\n    filterData.resolution = resolution;\n    filterData.blendRequired = blendRequired;\n  }\n  _popFilterData() {\n    this._filterStackIndex--;\n    return this._filterStack[this._filterStackIndex];\n  }\n  _getPreviousFilterData() {\n    let previousFilterData;\n    let index = this._filterStackIndex - 1;\n    while (index > 0) {\n      index--;\n      previousFilterData = this._filterStack[index];\n      if (!previousFilterData.skip) {\n        break;\n      }\n    }\n    return previousFilterData;\n  }\n  _pushFilterData() {\n    let filterData = this._filterStack[this._filterStackIndex];\n    if (!filterData) {\n      filterData = this._filterStack[this._filterStackIndex] = new FilterData();\n    }\n    this._filterStackIndex++;\n    return filterData;\n  }\n}\n/** @ignore */\nFilterSystem.extension = {\n  type: [\n    ExtensionType.WebGLSystem,\n    ExtensionType.WebGPUSystem\n  ],\n  name: \"filter\"\n};\n\nexport { FilterSystem };\n//# sourceMappingURL=FilterSystem.mjs.map\n","import { Buffer } from '../../../rendering/renderers/shared/buffer/Buffer.mjs';\nimport { BufferUsage } from '../../../rendering/renderers/shared/buffer/const.mjs';\nimport { Geometry } from '../../../rendering/renderers/shared/geometry/Geometry.mjs';\nimport { deprecation, v8_0_0 } from '../../../utils/logging/deprecation.mjs';\n\n\"use strict\";\nconst _MeshGeometry = class _MeshGeometry extends Geometry {\n  constructor(...args) {\n    let options = args[0] ?? {};\n    if (options instanceof Float32Array) {\n      deprecation(v8_0_0, \"use new MeshGeometry({ positions, uvs, indices }) instead\");\n      options = {\n        positions: options,\n        uvs: args[1],\n        indices: args[2]\n      };\n    }\n    options = { ..._MeshGeometry.defaultOptions, ...options };\n    const positions = options.positions || new Float32Array([0, 0, 1, 0, 1, 1, 0, 1]);\n    let uvs = options.uvs;\n    if (!uvs) {\n      if (options.positions) {\n        uvs = new Float32Array(positions.length);\n      } else {\n        uvs = new Float32Array([0, 0, 1, 0, 1, 1, 0, 1]);\n      }\n    }\n    const indices = options.indices || new Uint32Array([0, 1, 2, 0, 2, 3]);\n    const shrinkToFit = options.shrinkBuffersToFit;\n    const positionBuffer = new Buffer({\n      data: positions,\n      label: \"attribute-mesh-positions\",\n      shrinkToFit,\n      usage: BufferUsage.VERTEX | BufferUsage.COPY_DST\n    });\n    const uvBuffer = new Buffer({\n      data: uvs,\n      label: \"attribute-mesh-uvs\",\n      shrinkToFit,\n      usage: BufferUsage.VERTEX | BufferUsage.COPY_DST\n    });\n    const indexBuffer = new Buffer({\n      data: indices,\n      label: \"index-mesh-buffer\",\n      shrinkToFit,\n      usage: BufferUsage.INDEX | BufferUsage.COPY_DST\n    });\n    super({\n      attributes: {\n        aPosition: {\n          buffer: positionBuffer,\n          format: \"float32x2\",\n          stride: 2 * 4,\n          offset: 0\n        },\n        aUV: {\n          buffer: uvBuffer,\n          format: \"float32x2\",\n          stride: 2 * 4,\n          offset: 0\n        }\n      },\n      indexBuffer,\n      topology: options.topology\n    });\n    this.batchMode = \"auto\";\n  }\n  /** The positions of the mesh. */\n  get positions() {\n    return this.attributes.aPosition.buffer.data;\n  }\n  /**\n   * Set the positions of the mesh.\n   * When setting the positions, its important that the uvs array is at least as long as the positions array.\n   * otherwise the geometry will not be valid.\n   * @param {Float32Array} value - The positions of the mesh.\n   */\n  set positions(value) {\n    this.attributes.aPosition.buffer.data = value;\n  }\n  /** The UVs of the mesh. */\n  get uvs() {\n    return this.attributes.aUV.buffer.data;\n  }\n  /**\n   * Set the UVs of the mesh.\n   * Its important that the uvs array you set is at least as long as the positions array.\n   * otherwise the geometry will not be valid.\n   * @param {Float32Array} value - The UVs of the mesh.\n   */\n  set uvs(value) {\n    this.attributes.aUV.buffer.data = value;\n  }\n  /** The indices of the mesh. */\n  get indices() {\n    return this.indexBuffer.data;\n  }\n  set indices(value) {\n    this.indexBuffer.data = value;\n  }\n};\n_MeshGeometry.defaultOptions = {\n  topology: \"triangle-list\",\n  shrinkBuffersToFit: false\n};\nlet MeshGeometry = _MeshGeometry;\n\nexport { MeshGeometry };\n//# sourceMappingURL=MeshGeometry.mjs.map\n","import { DOMAdapter } from '../../environment/adapter.mjs';\n\n\"use strict\";\nconst nssvg = \"http://www.w3.org/2000/svg\";\nconst nsxhtml = \"http://www.w3.org/1999/xhtml\";\nclass HTMLTextRenderData {\n  constructor() {\n    this.svgRoot = document.createElementNS(nssvg, \"svg\");\n    this.foreignObject = document.createElementNS(nssvg, \"foreignObject\");\n    this.domElement = document.createElementNS(nsxhtml, \"div\");\n    this.styleElement = document.createElementNS(nsxhtml, \"style\");\n    const { foreignObject, svgRoot, styleElement, domElement } = this;\n    foreignObject.setAttribute(\"width\", \"10000\");\n    foreignObject.setAttribute(\"height\", \"10000\");\n    foreignObject.style.overflow = \"hidden\";\n    svgRoot.appendChild(foreignObject);\n    foreignObject.appendChild(styleElement);\n    foreignObject.appendChild(domElement);\n    this.image = DOMAdapter.get().createImage();\n  }\n  destroy() {\n    this.svgRoot.remove();\n    this.foreignObject.remove();\n    this.styleElement.remove();\n    this.domElement.remove();\n    this.image.src = \"\";\n    this.image.remove();\n    this.svgRoot = null;\n    this.foreignObject = null;\n    this.styleElement = null;\n    this.domElement = null;\n    this.image = null;\n    this.canvasAndContext = null;\n  }\n}\n\nexport { HTMLTextRenderData };\n//# sourceMappingURL=HTMLTextRenderData.mjs.map\n","import { HTMLTextRenderData } from '../HTMLTextRenderData.mjs';\n\n\"use strict\";\nlet tempHTMLTextRenderData;\nfunction measureHtmlText(text, style, fontStyleCSS, htmlTextRenderData) {\n  htmlTextRenderData || (htmlTextRenderData = tempHTMLTextRenderData || (tempHTMLTextRenderData = new HTMLTextRenderData()));\n  const { domElement, styleElement, svgRoot } = htmlTextRenderData;\n  domElement.innerHTML = `<style>${style.cssStyle};</style><div style='padding:0'>${text}</div>`;\n  domElement.setAttribute(\"style\", \"transform-origin: top left; display: inline-block\");\n  if (fontStyleCSS) {\n    styleElement.textContent = fontStyleCSS;\n  }\n  document.body.appendChild(svgRoot);\n  const contentBounds = domElement.getBoundingClientRect();\n  svgRoot.remove();\n  const doublePadding = style.padding * 2;\n  return {\n    width: contentBounds.width - doublePadding,\n    height: contentBounds.height - doublePadding\n  };\n}\n\nexport { measureHtmlText };\n//# sourceMappingURL=measureHtmlText.mjs.map\n","import { ExtensionType } from '../../../extensions/Extensions.mjs';\nimport { State } from '../../../rendering/renderers/shared/state/State.mjs';\nimport { BigPool } from '../../../utils/pool/PoolGroup.mjs';\nimport { color32BitToUniform } from '../gpu/colorToUniform.mjs';\nimport { BatchableGraphics } from './BatchableGraphics.mjs';\n\n\"use strict\";\nclass GraphicsGpuData {\n  constructor() {\n    this.batches = [];\n    this.batched = false;\n  }\n  destroy() {\n    this.batches.forEach((batch) => {\n      BigPool.return(batch);\n    });\n    this.batches.length = 0;\n  }\n}\nclass GraphicsPipe {\n  constructor(renderer, adaptor) {\n    this.state = State.for2d();\n    this.renderer = renderer;\n    this._adaptor = adaptor;\n    this.renderer.runners.contextChange.add(this);\n  }\n  contextChange() {\n    this._adaptor.contextChange(this.renderer);\n  }\n  validateRenderable(graphics) {\n    const context = graphics.context;\n    const wasBatched = !!graphics._gpuData;\n    const gpuContext = this.renderer.graphicsContext.updateGpuContext(context);\n    if (gpuContext.isBatchable || wasBatched !== gpuContext.isBatchable) {\n      return true;\n    }\n    return false;\n  }\n  addRenderable(graphics, instructionSet) {\n    const gpuContext = this.renderer.graphicsContext.updateGpuContext(graphics.context);\n    if (graphics.didViewUpdate) {\n      this._rebuild(graphics);\n    }\n    if (gpuContext.isBatchable) {\n      this._addToBatcher(graphics, instructionSet);\n    } else {\n      this.renderer.renderPipes.batch.break(instructionSet);\n      instructionSet.add(graphics);\n    }\n  }\n  updateRenderable(graphics) {\n    const gpuData = this._getGpuDataForRenderable(graphics);\n    const batches = gpuData.batches;\n    for (let i = 0; i < batches.length; i++) {\n      const batch = batches[i];\n      batch._batcher.updateElement(batch);\n    }\n  }\n  execute(graphics) {\n    if (!graphics.isRenderable)\n      return;\n    const renderer = this.renderer;\n    const context = graphics.context;\n    const contextSystem = renderer.graphicsContext;\n    if (!contextSystem.getGpuContext(context).batches.length) {\n      return;\n    }\n    const shader = context.customShader || this._adaptor.shader;\n    this.state.blendMode = graphics.groupBlendMode;\n    const localUniforms = shader.resources.localUniforms.uniforms;\n    localUniforms.uTransformMatrix = graphics.groupTransform;\n    localUniforms.uRound = renderer._roundPixels | graphics._roundPixels;\n    color32BitToUniform(\n      graphics.groupColorAlpha,\n      localUniforms.uColor,\n      0\n    );\n    this._adaptor.execute(this, graphics);\n  }\n  _rebuild(graphics) {\n    const gpuData = this._getGpuDataForRenderable(graphics);\n    const gpuContext = this.renderer.graphicsContext.updateGpuContext(graphics.context);\n    gpuData.destroy();\n    if (gpuContext.isBatchable) {\n      this._updateBatchesForRenderable(graphics, gpuData);\n    }\n  }\n  _addToBatcher(graphics, instructionSet) {\n    const batchPipe = this.renderer.renderPipes.batch;\n    const batches = this._getGpuDataForRenderable(graphics).batches;\n    for (let i = 0; i < batches.length; i++) {\n      const batch = batches[i];\n      batchPipe.addToBatch(batch, instructionSet);\n    }\n  }\n  _getGpuDataForRenderable(graphics) {\n    return graphics._gpuData[this.renderer.uid] || this._initGpuDataForRenderable(graphics);\n  }\n  _initGpuDataForRenderable(graphics) {\n    const gpuData = new GraphicsGpuData();\n    graphics._gpuData[this.renderer.uid] = gpuData;\n    return gpuData;\n  }\n  _updateBatchesForRenderable(graphics, gpuData) {\n    const context = graphics.context;\n    const gpuContext = this.renderer.graphicsContext.getGpuContext(context);\n    const roundPixels = this.renderer._roundPixels | graphics._roundPixels;\n    gpuData.batches = gpuContext.batches.map((batch) => {\n      const batchClone = BigPool.get(BatchableGraphics);\n      batch.copyTo(batchClone);\n      batchClone.renderable = graphics;\n      batchClone.roundPixels = roundPixels;\n      return batchClone;\n    });\n  }\n  destroy() {\n    this.renderer = null;\n    this._adaptor.destroy();\n    this._adaptor = null;\n    this.state = null;\n  }\n}\n/** @ignore */\nGraphicsPipe.extension = {\n  type: [\n    ExtensionType.WebGLPipes,\n    ExtensionType.WebGPUPipes,\n    ExtensionType.CanvasPipes\n  ],\n  name: \"graphics\"\n};\n\nexport { GraphicsGpuData, GraphicsPipe };\n//# sourceMappingURL=GraphicsPipe.mjs.map\n","import { deprecation, v8_0_0 } from '../../utils/logging/deprecation.mjs';\nimport { MeshGeometry } from '../mesh/shared/MeshGeometry.mjs';\n\n\"use strict\";\nconst _PlaneGeometry = class _PlaneGeometry extends MeshGeometry {\n  constructor(...args) {\n    super({});\n    let options = args[0] ?? {};\n    if (typeof options === \"number\") {\n      deprecation(v8_0_0, \"PlaneGeometry constructor changed please use { width, height, verticesX, verticesY } instead\");\n      options = {\n        width: options,\n        height: args[1],\n        verticesX: args[2],\n        verticesY: args[3]\n      };\n    }\n    this.build(options);\n  }\n  /**\n   * Refreshes plane coordinates\n   * @param options - Options to be applied to plane geometry\n   */\n  build(options) {\n    options = { ..._PlaneGeometry.defaultOptions, ...options };\n    this.verticesX = this.verticesX ?? options.verticesX;\n    this.verticesY = this.verticesY ?? options.verticesY;\n    this.width = this.width ?? options.width;\n    this.height = this.height ?? options.height;\n    const total = this.verticesX * this.verticesY;\n    const verts = [];\n    const uvs = [];\n    const indices = [];\n    const verticesX = this.verticesX - 1;\n    const verticesY = this.verticesY - 1;\n    const sizeX = this.width / verticesX;\n    const sizeY = this.height / verticesY;\n    for (let i = 0; i < total; i++) {\n      const x = i % this.verticesX;\n      const y = i / this.verticesX | 0;\n      verts.push(x * sizeX, y * sizeY);\n      uvs.push(x / verticesX, y / verticesY);\n    }\n    const totalSub = verticesX * verticesY;\n    for (let i = 0; i < totalSub; i++) {\n      const xpos = i % verticesX;\n      const ypos = i / verticesX | 0;\n      const value = ypos * this.verticesX + xpos;\n      const value2 = ypos * this.verticesX + xpos + 1;\n      const value3 = (ypos + 1) * this.verticesX + xpos;\n      const value4 = (ypos + 1) * this.verticesX + xpos + 1;\n      indices.push(\n        value,\n        value2,\n        value3,\n        value2,\n        value4,\n        value3\n      );\n    }\n    this.buffers[0].data = new Float32Array(verts);\n    this.buffers[1].data = new Float32Array(uvs);\n    this.indexBuffer.data = new Uint32Array(indices);\n    this.buffers[0].update();\n    this.buffers[1].update();\n    this.indexBuffer.update();\n  }\n};\n_PlaneGeometry.defaultOptions = {\n  width: 100,\n  height: 100,\n  verticesX: 10,\n  verticesY: 10\n};\nlet PlaneGeometry = _PlaneGeometry;\n\nexport { PlaneGeometry };\n//# sourceMappingURL=PlaneGeometry.mjs.map\n","\"use strict\";\nclass BatchableMesh {\n  constructor() {\n    this.batcherName = \"default\";\n    this.packAsQuad = false;\n    this.indexOffset = 0;\n    this.attributeOffset = 0;\n    this.roundPixels = 0;\n    this._batcher = null;\n    this._batch = null;\n    this._textureMatrixUpdateId = -1;\n    this._uvUpdateId = -1;\n  }\n  get blendMode() {\n    return this.renderable.groupBlendMode;\n  }\n  get topology() {\n    return this._topology || this.geometry.topology;\n  }\n  set topology(value) {\n    this._topology = value;\n  }\n  reset() {\n    this.renderable = null;\n    this.texture = null;\n    this._batcher = null;\n    this._batch = null;\n    this.geometry = null;\n    this._uvUpdateId = -1;\n    this._textureMatrixUpdateId = -1;\n  }\n  /**\n   * Sets the texture for the batchable mesh.\n   * As it does so, it resets the texture matrix update ID.\n   * this is to ensure that the texture matrix is recalculated when the uvs are referenced\n   * @param value - The texture to set.\n   */\n  setTexture(value) {\n    if (this.texture === value)\n      return;\n    this.texture = value;\n    this._textureMatrixUpdateId = -1;\n  }\n  get uvs() {\n    const geometry = this.geometry;\n    const uvBuffer = geometry.getBuffer(\"aUV\");\n    const uvs = uvBuffer.data;\n    let transformedUvs = uvs;\n    const textureMatrix = this.texture.textureMatrix;\n    if (!textureMatrix.isSimple) {\n      transformedUvs = this._transformedUvs;\n      if (this._textureMatrixUpdateId !== textureMatrix._updateID || this._uvUpdateId !== uvBuffer._updateID) {\n        if (!transformedUvs || transformedUvs.length < uvs.length) {\n          transformedUvs = this._transformedUvs = new Float32Array(uvs.length);\n        }\n        this._textureMatrixUpdateId = textureMatrix._updateID;\n        this._uvUpdateId = uvBuffer._updateID;\n        textureMatrix.multiplyUvs(uvs, transformedUvs);\n      }\n    }\n    return transformedUvs;\n  }\n  get positions() {\n    return this.geometry.positions;\n  }\n  get indices() {\n    return this.geometry.indices;\n  }\n  get color() {\n    return this.renderable.groupColorAlpha;\n  }\n  get groupTransform() {\n    return this.renderable.groupTransform;\n  }\n  get attributeSize() {\n    return this.geometry.positions.length / 2;\n  }\n  get indexSize() {\n    return this.geometry.indices.length;\n  }\n}\n\nexport { BatchableMesh };\n//# sourceMappingURL=BatchableMesh.mjs.map\n","import { ExtensionType } from '../../../extensions/Extensions.mjs';\nimport { Matrix } from '../../../maths/matrix/Matrix.mjs';\nimport { BindGroup } from '../../../rendering/renderers/gpu/shader/BindGroup.mjs';\nimport { UniformGroup } from '../../../rendering/renderers/shared/shader/UniformGroup.mjs';\nimport { getAdjustedBlendModeBlend } from '../../../rendering/renderers/shared/state/getAdjustedBlendModeBlend.mjs';\nimport { color32BitToUniform } from '../../graphics/gpu/colorToUniform.mjs';\nimport { BatchableMesh } from './BatchableMesh.mjs';\n\n\"use strict\";\nclass MeshGpuData {\n  destroy() {\n  }\n}\nclass MeshPipe {\n  constructor(renderer, adaptor) {\n    this.localUniforms = new UniformGroup({\n      uTransformMatrix: { value: new Matrix(), type: \"mat3x3<f32>\" },\n      uColor: { value: new Float32Array([1, 1, 1, 1]), type: \"vec4<f32>\" },\n      uRound: { value: 0, type: \"f32\" }\n    });\n    this.localUniformsBindGroup = new BindGroup({\n      0: this.localUniforms\n    });\n    this.renderer = renderer;\n    this._adaptor = adaptor;\n    this._adaptor.init();\n  }\n  validateRenderable(mesh) {\n    const meshData = this._getMeshData(mesh);\n    const wasBatched = meshData.batched;\n    const isBatched = mesh.batched;\n    meshData.batched = isBatched;\n    if (wasBatched !== isBatched) {\n      return true;\n    } else if (isBatched) {\n      const geometry = mesh._geometry;\n      if (geometry.indices.length !== meshData.indexSize || geometry.positions.length !== meshData.vertexSize) {\n        meshData.indexSize = geometry.indices.length;\n        meshData.vertexSize = geometry.positions.length;\n        return true;\n      }\n      const batchableMesh = this._getBatchableMesh(mesh);\n      if (batchableMesh.texture.uid !== mesh._texture.uid) {\n        batchableMesh._textureMatrixUpdateId = -1;\n      }\n      return !batchableMesh._batcher.checkAndUpdateTexture(\n        batchableMesh,\n        mesh._texture\n      );\n    }\n    return false;\n  }\n  addRenderable(mesh, instructionSet) {\n    const batcher = this.renderer.renderPipes.batch;\n    const meshData = this._getMeshData(mesh);\n    if (mesh.didViewUpdate) {\n      meshData.indexSize = mesh._geometry.indices?.length;\n      meshData.vertexSize = mesh._geometry.positions?.length;\n    }\n    if (meshData.batched) {\n      const gpuBatchableMesh = this._getBatchableMesh(mesh);\n      gpuBatchableMesh.setTexture(mesh._texture);\n      gpuBatchableMesh.geometry = mesh._geometry;\n      batcher.addToBatch(gpuBatchableMesh, instructionSet);\n    } else {\n      batcher.break(instructionSet);\n      instructionSet.add(mesh);\n    }\n  }\n  updateRenderable(mesh) {\n    if (mesh.batched) {\n      const gpuBatchableMesh = this._getBatchableMesh(mesh);\n      gpuBatchableMesh.setTexture(mesh._texture);\n      gpuBatchableMesh.geometry = mesh._geometry;\n      gpuBatchableMesh._batcher.updateElement(gpuBatchableMesh);\n    }\n  }\n  execute(mesh) {\n    if (!mesh.isRenderable)\n      return;\n    mesh.state.blendMode = getAdjustedBlendModeBlend(mesh.groupBlendMode, mesh.texture._source);\n    const localUniforms = this.localUniforms;\n    localUniforms.uniforms.uTransformMatrix = mesh.groupTransform;\n    localUniforms.uniforms.uRound = this.renderer._roundPixels | mesh._roundPixels;\n    localUniforms.update();\n    color32BitToUniform(\n      mesh.groupColorAlpha,\n      localUniforms.uniforms.uColor,\n      0\n    );\n    this._adaptor.execute(this, mesh);\n  }\n  _getMeshData(mesh) {\n    var _a, _b;\n    (_a = mesh._gpuData)[_b = this.renderer.uid] || (_a[_b] = new MeshGpuData());\n    return mesh._gpuData[this.renderer.uid].meshData || this._initMeshData(mesh);\n  }\n  _initMeshData(mesh) {\n    mesh._gpuData[this.renderer.uid].meshData = {\n      batched: mesh.batched,\n      indexSize: 0,\n      vertexSize: 0\n    };\n    return mesh._gpuData[this.renderer.uid].meshData;\n  }\n  _getBatchableMesh(mesh) {\n    var _a, _b;\n    (_a = mesh._gpuData)[_b = this.renderer.uid] || (_a[_b] = new MeshGpuData());\n    return mesh._gpuData[this.renderer.uid].batchableMesh || this._initBatchableMesh(mesh);\n  }\n  _initBatchableMesh(mesh) {\n    const gpuMesh = new BatchableMesh();\n    gpuMesh.renderable = mesh;\n    gpuMesh.setTexture(mesh._texture);\n    gpuMesh.transform = mesh.groupTransform;\n    gpuMesh.roundPixels = this.renderer._roundPixels | mesh._roundPixels;\n    mesh._gpuData[this.renderer.uid].batchableMesh = gpuMesh;\n    return gpuMesh;\n  }\n  destroy() {\n    this.localUniforms = null;\n    this.localUniformsBindGroup = null;\n    this._adaptor.destroy();\n    this._adaptor = null;\n    this.renderer = null;\n  }\n}\n/** @ignore */\nMeshPipe.extension = {\n  type: [\n    ExtensionType.WebGLPipes,\n    ExtensionType.WebGPUPipes,\n    ExtensionType.CanvasPipes\n  ],\n  name: \"mesh\"\n};\n\nexport { MeshGpuData, MeshPipe };\n//# sourceMappingURL=MeshPipe.mjs.map\n","\"use strict\";\nclass GlParticleContainerAdaptor {\n  execute(particleContainerPipe, container) {\n    const state = particleContainerPipe.state;\n    const renderer = particleContainerPipe.renderer;\n    const shader = container.shader || particleContainerPipe.defaultShader;\n    shader.resources.uTexture = container.texture._source;\n    shader.resources.uniforms = particleContainerPipe.localUniforms;\n    const gl = renderer.gl;\n    const buffer = particleContainerPipe.getBuffers(container);\n    renderer.shader.bind(shader);\n    renderer.state.set(state);\n    renderer.geometry.bind(buffer.geometry, shader.glProgram);\n    const byteSize = buffer.geometry.indexBuffer.data.BYTES_PER_ELEMENT;\n    const glType = byteSize === 2 ? gl.UNSIGNED_SHORT : gl.UNSIGNED_INT;\n    gl.drawElements(gl.TRIANGLES, container.particleChildren.length * 6, glType, 0);\n  }\n}\n\nexport { GlParticleContainerAdaptor };\n//# sourceMappingURL=GlParticleContainerAdaptor.mjs.map\n","\"use strict\";\nclass GpuParticleContainerAdaptor {\n  execute(particleContainerPipe, container) {\n    const renderer = particleContainerPipe.renderer;\n    const shader = container.shader || particleContainerPipe.defaultShader;\n    shader.groups[0] = renderer.renderPipes.uniformBatch.getUniformBindGroup(particleContainerPipe.localUniforms, true);\n    shader.groups[1] = renderer.texture.getTextureBindGroup(container.texture);\n    const state = particleContainerPipe.state;\n    const buffer = particleContainerPipe.getBuffers(container);\n    renderer.encoder.draw({\n      geometry: buffer.geometry,\n      shader: container.shader || particleContainerPipe.defaultShader,\n      state,\n      size: container.particleChildren.length * 6\n    });\n  }\n}\n\nexport { GpuParticleContainerAdaptor };\n//# sourceMappingURL=GpuParticleContainerAdaptor.mjs.map\n","\"use strict\";\nfunction createIndicesForQuads(size, outBuffer = null) {\n  const totalIndices = size * 6;\n  if (totalIndices > 65535) {\n    outBuffer || (outBuffer = new Uint32Array(totalIndices));\n  } else {\n    outBuffer || (outBuffer = new Uint16Array(totalIndices));\n  }\n  if (outBuffer.length !== totalIndices) {\n    throw new Error(`Out buffer length is incorrect, got ${outBuffer.length} and expected ${totalIndices}`);\n  }\n  for (let i = 0, j = 0; i < totalIndices; i += 6, j += 4) {\n    outBuffer[i + 0] = j + 0;\n    outBuffer[i + 1] = j + 1;\n    outBuffer[i + 2] = j + 2;\n    outBuffer[i + 3] = j + 0;\n    outBuffer[i + 4] = j + 2;\n    outBuffer[i + 5] = j + 3;\n  }\n  return outBuffer;\n}\n\nexport { createIndicesForQuads };\n//# sourceMappingURL=createIndicesForQuads.mjs.map\n","import { getAttributeInfoFromFormat } from '../../../../rendering/renderers/shared/geometry/utils/getAttributeInfoFromFormat.mjs';\n\n\"use strict\";\nfunction generateParticleUpdateFunction(properties) {\n  return {\n    dynamicUpdate: generateUpdateFunction(properties, true),\n    staticUpdate: generateUpdateFunction(properties, false)\n  };\n}\nfunction generateUpdateFunction(properties, dynamic) {\n  const funcFragments = [];\n  funcFragments.push(`\n\n        var index = 0;\n\n        for (let i = 0; i < ps.length; ++i)\n        {\n            const p = ps[i];\n\n            `);\n  let offset = 0;\n  for (const i in properties) {\n    const property = properties[i];\n    if (dynamic !== property.dynamic)\n      continue;\n    funcFragments.push(`offset = index + ${offset}`);\n    funcFragments.push(property.code);\n    const attributeInfo = getAttributeInfoFromFormat(property.format);\n    offset += attributeInfo.stride / 4;\n  }\n  funcFragments.push(`\n            index += stride * 4;\n        }\n    `);\n  funcFragments.unshift(`\n        var stride = ${offset};\n    `);\n  const functionSource = funcFragments.join(\"\\n\");\n  return new Function(\"ps\", \"f32v\", \"u32v\", functionSource);\n}\n\nexport { generateParticleUpdateFunction };\n//# sourceMappingURL=generateParticleUpdateFunction.mjs.map\n","import { Buffer } from '../../../rendering/renderers/shared/buffer/Buffer.mjs';\nimport { BufferUsage } from '../../../rendering/renderers/shared/buffer/const.mjs';\nimport { Geometry } from '../../../rendering/renderers/shared/geometry/Geometry.mjs';\nimport { getAttributeInfoFromFormat } from '../../../rendering/renderers/shared/geometry/utils/getAttributeInfoFromFormat.mjs';\nimport { ViewableBuffer } from '../../../utils/data/ViewableBuffer.mjs';\nimport { createIndicesForQuads } from './utils/createIndicesForQuads.mjs';\nimport { generateParticleUpdateFunction } from './utils/generateParticleUpdateFunction.mjs';\n\n\"use strict\";\nclass ParticleBuffer {\n  constructor(options) {\n    this._size = 0;\n    this._generateParticleUpdateCache = {};\n    const size = this._size = options.size ?? 1e3;\n    const properties = options.properties;\n    let staticVertexSize = 0;\n    let dynamicVertexSize = 0;\n    for (const i in properties) {\n      const property = properties[i];\n      const attributeInfo = getAttributeInfoFromFormat(property.format);\n      if (property.dynamic) {\n        dynamicVertexSize += attributeInfo.stride;\n      } else {\n        staticVertexSize += attributeInfo.stride;\n      }\n    }\n    this._dynamicStride = dynamicVertexSize / 4;\n    this._staticStride = staticVertexSize / 4;\n    this.staticAttributeBuffer = new ViewableBuffer(size * 4 * staticVertexSize);\n    this.dynamicAttributeBuffer = new ViewableBuffer(size * 4 * dynamicVertexSize);\n    this.indexBuffer = createIndicesForQuads(size);\n    const geometry = new Geometry();\n    let dynamicOffset = 0;\n    let staticOffset = 0;\n    this._staticBuffer = new Buffer({\n      data: new Float32Array(1),\n      label: \"static-particle-buffer\",\n      shrinkToFit: false,\n      usage: BufferUsage.VERTEX | BufferUsage.COPY_DST\n    });\n    this._dynamicBuffer = new Buffer({\n      data: new Float32Array(1),\n      label: \"dynamic-particle-buffer\",\n      shrinkToFit: false,\n      usage: BufferUsage.VERTEX | BufferUsage.COPY_DST\n    });\n    for (const i in properties) {\n      const property = properties[i];\n      const attributeInfo = getAttributeInfoFromFormat(property.format);\n      if (property.dynamic) {\n        geometry.addAttribute(property.attributeName, {\n          buffer: this._dynamicBuffer,\n          stride: this._dynamicStride * 4,\n          offset: dynamicOffset * 4,\n          format: property.format\n        });\n        dynamicOffset += attributeInfo.size;\n      } else {\n        geometry.addAttribute(property.attributeName, {\n          buffer: this._staticBuffer,\n          stride: this._staticStride * 4,\n          offset: staticOffset * 4,\n          format: property.format\n        });\n        staticOffset += attributeInfo.size;\n      }\n    }\n    geometry.addIndex(this.indexBuffer);\n    const uploadFunction = this.getParticleUpdate(properties);\n    this._dynamicUpload = uploadFunction.dynamicUpdate;\n    this._staticUpload = uploadFunction.staticUpdate;\n    this.geometry = geometry;\n  }\n  getParticleUpdate(properties) {\n    const key = getParticleSyncKey(properties);\n    if (this._generateParticleUpdateCache[key]) {\n      return this._generateParticleUpdateCache[key];\n    }\n    this._generateParticleUpdateCache[key] = this.generateParticleUpdate(properties);\n    return this._generateParticleUpdateCache[key];\n  }\n  generateParticleUpdate(properties) {\n    return generateParticleUpdateFunction(properties);\n  }\n  update(particles, uploadStatic) {\n    if (particles.length > this._size) {\n      uploadStatic = true;\n      this._size = Math.max(particles.length, this._size * 1.5 | 0);\n      this.staticAttributeBuffer = new ViewableBuffer(this._size * this._staticStride * 4 * 4);\n      this.dynamicAttributeBuffer = new ViewableBuffer(this._size * this._dynamicStride * 4 * 4);\n      this.indexBuffer = createIndicesForQuads(this._size);\n      this.geometry.indexBuffer.setDataWithSize(\n        this.indexBuffer,\n        this.indexBuffer.byteLength,\n        true\n      );\n    }\n    const dynamicAttributeBuffer = this.dynamicAttributeBuffer;\n    this._dynamicUpload(particles, dynamicAttributeBuffer.float32View, dynamicAttributeBuffer.uint32View);\n    this._dynamicBuffer.setDataWithSize(\n      this.dynamicAttributeBuffer.float32View,\n      particles.length * this._dynamicStride * 4,\n      true\n    );\n    if (uploadStatic) {\n      const staticAttributeBuffer = this.staticAttributeBuffer;\n      this._staticUpload(particles, staticAttributeBuffer.float32View, staticAttributeBuffer.uint32View);\n      this._staticBuffer.setDataWithSize(\n        staticAttributeBuffer.float32View,\n        particles.length * this._staticStride * 4,\n        true\n      );\n    }\n  }\n  destroy() {\n    this._staticBuffer.destroy();\n    this._dynamicBuffer.destroy();\n    this.geometry.destroy();\n  }\n}\nfunction getParticleSyncKey(properties) {\n  const keyGen = [];\n  for (const key in properties) {\n    const property = properties[key];\n    keyGen.push(key, property.code, property.dynamic ? \"d\" : \"s\");\n  }\n  return keyGen.join(\"_\");\n}\n\nexport { ParticleBuffer };\n//# sourceMappingURL=ParticleBuffer.mjs.map\n","var fragment = \"varying vec2 vUV;\\nvarying vec4 vColor;\\n\\nuniform sampler2D uTexture;\\n\\nvoid main(void){\\n    vec4 color = texture2D(uTexture, vUV) * vColor;\\n    gl_FragColor = color;\\n}\";\n\nexport { fragment as default };\n//# sourceMappingURL=particles.frag.mjs.map\n","var vertex = \"attribute vec2 aVertex;\\nattribute vec2 aUV;\\nattribute vec4 aColor;\\n\\nattribute vec2 aPosition;\\nattribute float aRotation;\\n\\nuniform mat3 uTranslationMatrix;\\nuniform float uRound;\\nuniform vec2 uResolution;\\nuniform vec4 uColor;\\n\\nvarying vec2 vUV;\\nvarying vec4 vColor;\\n\\nvec2 roundPixels(vec2 position, vec2 targetSize)\\n{       \\n    return (floor(((position * 0.5 + 0.5) * targetSize) + 0.5) / targetSize) * 2.0 - 1.0;\\n}\\n\\nvoid main(void){\\n    float cosRotation = cos(aRotation);\\n    float sinRotation = sin(aRotation);\\n    float x = aVertex.x * cosRotation - aVertex.y * sinRotation;\\n    float y = aVertex.x * sinRotation + aVertex.y * cosRotation;\\n\\n    vec2 v = vec2(x, y);\\n    v = v + aPosition;\\n\\n    gl_Position = vec4((uTranslationMatrix * vec3(v, 1.0)).xy, 0.0, 1.0);\\n\\n    if(uRound == 1.0)\\n    {\\n        gl_Position.xy = roundPixels(gl_Position.xy, uResolution);\\n    }\\n\\n    vUV = aUV;\\n    vColor = vec4(aColor.rgb * aColor.a, aColor.a) * uColor;\\n}\\n\";\n\nexport { vertex as default };\n//# sourceMappingURL=particles.vert.mjs.map\n","var wgsl = \"\\nstruct ParticleUniforms {\\n  uTranslationMatrix:mat3x3<f32>,\\n  uColor:vec4<f32>,\\n  uRound:f32,\\n  uResolution:vec2<f32>,\\n};\\n\\nfn roundPixels(position: vec2<f32>, targetSize: vec2<f32>) -> vec2<f32>\\n{\\n  return (floor(((position * 0.5 + 0.5) * targetSize) + 0.5) / targetSize) * 2.0 - 1.0;\\n}\\n\\n@group(0) @binding(0) var<uniform> uniforms: ParticleUniforms;\\n\\n@group(1) @binding(0) var uTexture: texture_2d<f32>;\\n@group(1) @binding(1) var uSampler : sampler;\\n\\nstruct VSOutput {\\n    @builtin(position) position: vec4<f32>,\\n    @location(0) uv : vec2<f32>,\\n    @location(1) color : vec4<f32>,\\n  };\\n@vertex\\nfn mainVertex(\\n  @location(0) aVertex: vec2<f32>,\\n  @location(1) aPosition: vec2<f32>,\\n  @location(2) aUV: vec2<f32>,\\n  @location(3) aColor: vec4<f32>,\\n  @location(4) aRotation: f32,\\n) -> VSOutput {\\n  \\n   let v = vec2(\\n       aVertex.x * cos(aRotation) - aVertex.y * sin(aRotation),\\n       aVertex.x * sin(aRotation) + aVertex.y * cos(aRotation)\\n   ) + aPosition;\\n\\n   var position = vec4((uniforms.uTranslationMatrix * vec3(v, 1.0)).xy, 0.0, 1.0);\\n\\n   if(uniforms.uRound == 1.0) {\\n       position = vec4(roundPixels(position.xy, uniforms.uResolution), position.zw);\\n   }\\n\\n    let vColor = vec4(aColor.rgb * aColor.a, aColor.a) * uniforms.uColor;\\n\\n  return VSOutput(\\n   position,\\n   aUV,\\n   vColor,\\n  );\\n}\\n\\n@fragment\\nfn mainFragment(\\n  @location(0) uv: vec2<f32>,\\n  @location(1) color: vec4<f32>,\\n  @builtin(position) position: vec4<f32>,\\n) -> @location(0) vec4<f32> {\\n\\n    var sample = textureSample(uTexture, uSampler, uv) * color;\\n   \\n    return sample;\\n}\";\n\nexport { wgsl as default };\n//# sourceMappingURL=particles.wgsl.mjs.map\n","import { Color } from '../../../../color/Color.mjs';\nimport { Matrix } from '../../../../maths/matrix/Matrix.mjs';\nimport { GlProgram } from '../../../../rendering/renderers/gl/shader/GlProgram.mjs';\nimport { GpuProgram } from '../../../../rendering/renderers/gpu/shader/GpuProgram.mjs';\nimport { Shader } from '../../../../rendering/renderers/shared/shader/Shader.mjs';\nimport { Texture } from '../../../../rendering/renderers/shared/texture/Texture.mjs';\nimport { TextureStyle } from '../../../../rendering/renderers/shared/texture/TextureStyle.mjs';\nimport fragment from './particles.frag.mjs';\nimport vertex from './particles.vert.mjs';\nimport wgsl from './particles.wgsl.mjs';\n\n\"use strict\";\nclass ParticleShader extends Shader {\n  constructor() {\n    const glProgram = GlProgram.from({\n      vertex,\n      fragment\n    });\n    const gpuProgram = GpuProgram.from({\n      fragment: {\n        source: wgsl,\n        entryPoint: \"mainFragment\"\n      },\n      vertex: {\n        source: wgsl,\n        entryPoint: \"mainVertex\"\n      }\n    });\n    super({\n      glProgram,\n      gpuProgram,\n      resources: {\n        // this will be replaced with the texture from the particle container\n        uTexture: Texture.WHITE.source,\n        // this will be replaced with the texture style from the particle container\n        uSampler: new TextureStyle({}),\n        // this will be replaced with the local uniforms from the particle container\n        uniforms: {\n          uTranslationMatrix: { value: new Matrix(), type: \"mat3x3<f32>\" },\n          uColor: { value: new Color(16777215), type: \"vec4<f32>\" },\n          uRound: { value: 1, type: \"f32\" },\n          uResolution: { value: [0, 0], type: \"vec2<f32>\" }\n        }\n      }\n    });\n  }\n}\n\nexport { ParticleShader };\n//# sourceMappingURL=ParticleShader.mjs.map\n","import { Matrix } from '../../../maths/matrix/Matrix.mjs';\nimport { UniformGroup } from '../../../rendering/renderers/shared/shader/UniformGroup.mjs';\nimport { getAdjustedBlendModeBlend } from '../../../rendering/renderers/shared/state/getAdjustedBlendModeBlend.mjs';\nimport { State } from '../../../rendering/renderers/shared/state/State.mjs';\nimport { color32BitToUniform } from '../../graphics/gpu/colorToUniform.mjs';\nimport { ParticleBuffer } from './ParticleBuffer.mjs';\nimport { ParticleShader } from './shader/ParticleShader.mjs';\n\n\"use strict\";\nclass ParticleContainerPipe {\n  /**\n   * @param renderer - The renderer this sprite batch works for.\n   * @param adaptor\n   */\n  constructor(renderer, adaptor) {\n    /** @internal */\n    this.state = State.for2d();\n    /** Local uniforms that are used for rendering particles. */\n    this.localUniforms = new UniformGroup({\n      uTranslationMatrix: { value: new Matrix(), type: \"mat3x3<f32>\" },\n      uColor: { value: new Float32Array(4), type: \"vec4<f32>\" },\n      uRound: { value: 1, type: \"f32\" },\n      uResolution: { value: [0, 0], type: \"vec2<f32>\" }\n    });\n    this.renderer = renderer;\n    this.adaptor = adaptor;\n    this.defaultShader = new ParticleShader();\n    this.state = State.for2d();\n  }\n  validateRenderable(_renderable) {\n    return false;\n  }\n  addRenderable(renderable, instructionSet) {\n    this.renderer.renderPipes.batch.break(instructionSet);\n    instructionSet.add(renderable);\n  }\n  getBuffers(renderable) {\n    return renderable._gpuData[this.renderer.uid] || this._initBuffer(renderable);\n  }\n  _initBuffer(renderable) {\n    renderable._gpuData[this.renderer.uid] = new ParticleBuffer({\n      size: renderable.particleChildren.length,\n      properties: renderable._properties\n    });\n    return renderable._gpuData[this.renderer.uid];\n  }\n  updateRenderable(_renderable) {\n  }\n  execute(container) {\n    const children = container.particleChildren;\n    if (children.length === 0) {\n      return;\n    }\n    const renderer = this.renderer;\n    const buffer = this.getBuffers(container);\n    container.texture || (container.texture = children[0].texture);\n    const state = this.state;\n    buffer.update(children, container._childrenDirty);\n    container._childrenDirty = false;\n    state.blendMode = getAdjustedBlendModeBlend(container.blendMode, container.texture._source);\n    const uniforms = this.localUniforms.uniforms;\n    const transformationMatrix = uniforms.uTranslationMatrix;\n    container.worldTransform.copyTo(transformationMatrix);\n    transformationMatrix.prepend(renderer.globalUniforms.globalUniformData.projectionMatrix);\n    uniforms.uResolution = renderer.globalUniforms.globalUniformData.resolution;\n    uniforms.uRound = renderer._roundPixels | container._roundPixels;\n    color32BitToUniform(\n      container.groupColorAlpha,\n      uniforms.uColor,\n      0\n    );\n    this.adaptor.execute(this, container);\n  }\n  /** Destroys the ParticleRenderer. */\n  destroy() {\n    this.renderer = null;\n    if (this.defaultShader) {\n      this.defaultShader.destroy();\n      this.defaultShader = null;\n    }\n  }\n}\n\nexport { ParticleContainerPipe };\n//# sourceMappingURL=ParticleContainerPipe.mjs.map\n","import { ExtensionType } from '../../../extensions/Extensions.mjs';\nimport { GlParticleContainerAdaptor } from '../gl/GlParticleContainerAdaptor.mjs';\nimport { ParticleContainerPipe } from './ParticleContainerPipe.mjs';\n\n\"use strict\";\nclass GlParticleContainerPipe extends ParticleContainerPipe {\n  constructor(renderer) {\n    super(renderer, new GlParticleContainerAdaptor());\n  }\n}\n/** @ignore */\nGlParticleContainerPipe.extension = {\n  type: [\n    ExtensionType.WebGLPipes\n  ],\n  name: \"particle\"\n};\n\nexport { GlParticleContainerPipe };\n//# sourceMappingURL=GlParticleContainerPipe.mjs.map\n","import { ExtensionType } from '../../../extensions/Extensions.mjs';\nimport { GpuParticleContainerAdaptor } from '../gpu/GpuParticleContainerAdaptor.mjs';\nimport { ParticleContainerPipe } from './ParticleContainerPipe.mjs';\n\n\"use strict\";\nclass GpuParticleContainerPipe extends ParticleContainerPipe {\n  constructor(renderer) {\n    super(renderer, new GpuParticleContainerAdaptor());\n  }\n}\n/** @ignore */\nGpuParticleContainerPipe.extension = {\n  type: [\n    ExtensionType.WebGPUPipes\n  ],\n  name: \"particle\"\n};\n\nexport { GpuParticleContainerPipe };\n//# sourceMappingURL=GpuParticleContainerPipe.mjs.map\n","import { PlaneGeometry } from '../mesh-plane/PlaneGeometry.mjs';\n\n\"use strict\";\nconst _NineSliceGeometry = class _NineSliceGeometry extends PlaneGeometry {\n  constructor(options = {}) {\n    options = { ..._NineSliceGeometry.defaultOptions, ...options };\n    super({\n      width: options.width,\n      height: options.height,\n      verticesX: 4,\n      verticesY: 4\n    });\n    this.update(options);\n  }\n  /**\n   * Updates the NineSliceGeometry with the options.\n   * @param options - The options of the NineSliceGeometry.\n   */\n  update(options) {\n    this.width = options.width ?? this.width;\n    this.height = options.height ?? this.height;\n    this._originalWidth = options.originalWidth ?? this._originalWidth;\n    this._originalHeight = options.originalHeight ?? this._originalHeight;\n    this._leftWidth = options.leftWidth ?? this._leftWidth;\n    this._rightWidth = options.rightWidth ?? this._rightWidth;\n    this._topHeight = options.topHeight ?? this._topHeight;\n    this._bottomHeight = options.bottomHeight ?? this._bottomHeight;\n    this._anchorX = options.anchor?.x;\n    this._anchorY = options.anchor?.y;\n    this.updateUvs();\n    this.updatePositions();\n  }\n  /** Updates the positions of the vertices. */\n  updatePositions() {\n    const p = this.positions;\n    const {\n      width,\n      height,\n      _leftWidth,\n      _rightWidth,\n      _topHeight,\n      _bottomHeight,\n      _anchorX,\n      _anchorY\n    } = this;\n    const w = _leftWidth + _rightWidth;\n    const scaleW = width > w ? 1 : width / w;\n    const h = _topHeight + _bottomHeight;\n    const scaleH = height > h ? 1 : height / h;\n    const scale = Math.min(scaleW, scaleH);\n    const anchorOffsetX = _anchorX * width;\n    const anchorOffsetY = _anchorY * height;\n    p[0] = p[8] = p[16] = p[24] = -anchorOffsetX;\n    p[2] = p[10] = p[18] = p[26] = _leftWidth * scale - anchorOffsetX;\n    p[4] = p[12] = p[20] = p[28] = width - _rightWidth * scale - anchorOffsetX;\n    p[6] = p[14] = p[22] = p[30] = width - anchorOffsetX;\n    p[1] = p[3] = p[5] = p[7] = -anchorOffsetY;\n    p[9] = p[11] = p[13] = p[15] = _topHeight * scale - anchorOffsetY;\n    p[17] = p[19] = p[21] = p[23] = height - _bottomHeight * scale - anchorOffsetY;\n    p[25] = p[27] = p[29] = p[31] = height - anchorOffsetY;\n    this.getBuffer(\"aPosition\").update();\n  }\n  /** Updates the UVs of the vertices. */\n  updateUvs() {\n    const uvs = this.uvs;\n    uvs[0] = uvs[8] = uvs[16] = uvs[24] = 0;\n    uvs[1] = uvs[3] = uvs[5] = uvs[7] = 0;\n    uvs[6] = uvs[14] = uvs[22] = uvs[30] = 1;\n    uvs[25] = uvs[27] = uvs[29] = uvs[31] = 1;\n    const _uvw = 1 / this._originalWidth;\n    const _uvh = 1 / this._originalHeight;\n    uvs[2] = uvs[10] = uvs[18] = uvs[26] = _uvw * this._leftWidth;\n    uvs[9] = uvs[11] = uvs[13] = uvs[15] = _uvh * this._topHeight;\n    uvs[4] = uvs[12] = uvs[20] = uvs[28] = 1 - _uvw * this._rightWidth;\n    uvs[17] = uvs[19] = uvs[21] = uvs[23] = 1 - _uvh * this._bottomHeight;\n    this.getBuffer(\"aUV\").update();\n  }\n};\n/** The default options for the NineSliceGeometry. */\n_NineSliceGeometry.defaultOptions = {\n  /** The width of the NineSlicePlane, setting this will actually modify the vertices and UV's of this plane. */\n  width: 100,\n  /** The height of the NineSlicePlane, setting this will actually modify the vertices and UV's of this plane. */\n  height: 100,\n  /** The width of the left column. */\n  leftWidth: 10,\n  /** The height of the top row. */\n  topHeight: 10,\n  /** The width of the right column. */\n  rightWidth: 10,\n  /** The height of the bottom row. */\n  bottomHeight: 10,\n  /** The original width of the texture */\n  originalWidth: 100,\n  /** The original height of the texture */\n  originalHeight: 100\n};\nlet NineSliceGeometry = _NineSliceGeometry;\n\nexport { NineSliceGeometry };\n//# sourceMappingURL=NineSliceGeometry.mjs.map\n","import { ExtensionType } from '../../extensions/Extensions.mjs';\nimport { BatchableMesh } from '../mesh/shared/BatchableMesh.mjs';\nimport { NineSliceGeometry } from './NineSliceGeometry.mjs';\n\n\"use strict\";\nclass NineSliceSpriteGpuData extends BatchableMesh {\n  constructor() {\n    super();\n    this.geometry = new NineSliceGeometry();\n  }\n  destroy() {\n    this.geometry.destroy();\n  }\n}\nclass NineSliceSpritePipe {\n  constructor(renderer) {\n    this._renderer = renderer;\n  }\n  addRenderable(sprite, instructionSet) {\n    const gpuSprite = this._getGpuSprite(sprite);\n    if (sprite.didViewUpdate)\n      this._updateBatchableSprite(sprite, gpuSprite);\n    this._renderer.renderPipes.batch.addToBatch(gpuSprite, instructionSet);\n  }\n  updateRenderable(sprite) {\n    const gpuSprite = this._getGpuSprite(sprite);\n    if (sprite.didViewUpdate)\n      this._updateBatchableSprite(sprite, gpuSprite);\n    gpuSprite._batcher.updateElement(gpuSprite);\n  }\n  validateRenderable(sprite) {\n    const gpuSprite = this._getGpuSprite(sprite);\n    return !gpuSprite._batcher.checkAndUpdateTexture(\n      gpuSprite,\n      sprite._texture\n    );\n  }\n  _updateBatchableSprite(sprite, batchableSprite) {\n    batchableSprite.geometry.update(sprite);\n    batchableSprite.setTexture(sprite._texture);\n  }\n  _getGpuSprite(sprite) {\n    return sprite._gpuData[this._renderer.uid] || this._initGPUSprite(sprite);\n  }\n  _initGPUSprite(sprite) {\n    const gpuData = sprite._gpuData[this._renderer.uid] = new NineSliceSpriteGpuData();\n    const batchableMesh = gpuData;\n    batchableMesh.renderable = sprite;\n    batchableMesh.transform = sprite.groupTransform;\n    batchableMesh.texture = sprite._texture;\n    batchableMesh.roundPixels = this._renderer._roundPixels | sprite._roundPixels;\n    if (!sprite.didViewUpdate) {\n      this._updateBatchableSprite(sprite, batchableMesh);\n    }\n    return gpuData;\n  }\n  destroy() {\n    this._renderer = null;\n  }\n}\n/** @ignore */\nNineSliceSpritePipe.extension = {\n  type: [\n    ExtensionType.WebGLPipes,\n    ExtensionType.WebGPUPipes,\n    ExtensionType.CanvasPipes\n  ],\n  name: \"nineSliceSprite\"\n};\n\nexport { NineSliceSpriteGpuData, NineSliceSpritePipe };\n//# sourceMappingURL=NineSliceSpritePipe.mjs.map\n","\"use strict\";\nconst tilingBit = {\n  name: \"tiling-bit\",\n  vertex: {\n    header: (\n      /* wgsl */\n      `\n            struct TilingUniforms {\n                uMapCoord:mat3x3<f32>,\n                uClampFrame:vec4<f32>,\n                uClampOffset:vec2<f32>,\n                uTextureTransform:mat3x3<f32>,\n                uSizeAnchor:vec4<f32>\n            };\n\n            @group(2) @binding(0) var<uniform> tilingUniforms: TilingUniforms;\n            @group(2) @binding(1) var uTexture: texture_2d<f32>;\n            @group(2) @binding(2) var uSampler: sampler;\n        `\n    ),\n    main: (\n      /* wgsl */\n      `\n            uv = (tilingUniforms.uTextureTransform * vec3(uv, 1.0)).xy;\n\n            position = (position - tilingUniforms.uSizeAnchor.zw) * tilingUniforms.uSizeAnchor.xy;\n        `\n    )\n  },\n  fragment: {\n    header: (\n      /* wgsl */\n      `\n            struct TilingUniforms {\n                uMapCoord:mat3x3<f32>,\n                uClampFrame:vec4<f32>,\n                uClampOffset:vec2<f32>,\n                uTextureTransform:mat3x3<f32>,\n                uSizeAnchor:vec4<f32>\n            };\n\n            @group(2) @binding(0) var<uniform> tilingUniforms: TilingUniforms;\n            @group(2) @binding(1) var uTexture: texture_2d<f32>;\n            @group(2) @binding(2) var uSampler: sampler;\n        `\n    ),\n    main: (\n      /* wgsl */\n      `\n\n            var coord = vUV + ceil(tilingUniforms.uClampOffset - vUV);\n            coord = (tilingUniforms.uMapCoord * vec3(coord, 1.0)).xy;\n            var unclamped = coord;\n            coord = clamp(coord, tilingUniforms.uClampFrame.xy, tilingUniforms.uClampFrame.zw);\n\n            var bias = 0.;\n\n            if(unclamped.x == coord.x && unclamped.y == coord.y)\n            {\n                bias = -32.;\n            }\n\n            outColor = textureSampleBias(uTexture, uSampler, coord, bias);\n        `\n    )\n  }\n};\nconst tilingBitGl = {\n  name: \"tiling-bit\",\n  vertex: {\n    header: (\n      /* glsl */\n      `\n            uniform mat3 uTextureTransform;\n            uniform vec4 uSizeAnchor;\n\n        `\n    ),\n    main: (\n      /* glsl */\n      `\n            uv = (uTextureTransform * vec3(aUV, 1.0)).xy;\n\n            position = (position - uSizeAnchor.zw) * uSizeAnchor.xy;\n        `\n    )\n  },\n  fragment: {\n    header: (\n      /* glsl */\n      `\n            uniform sampler2D uTexture;\n            uniform mat3 uMapCoord;\n            uniform vec4 uClampFrame;\n            uniform vec2 uClampOffset;\n        `\n    ),\n    main: (\n      /* glsl */\n      `\n\n        vec2 coord = vUV + ceil(uClampOffset - vUV);\n        coord = (uMapCoord * vec3(coord, 1.0)).xy;\n        vec2 unclamped = coord;\n        coord = clamp(coord, uClampFrame.xy, uClampFrame.zw);\n\n        outColor = texture(uTexture, coord, unclamped == coord ? 0.0 : -32.0);// lod-bias very negative to force lod 0\n\n        `\n    )\n  }\n};\n\nexport { tilingBit, tilingBitGl };\n//# sourceMappingURL=tilingBit.mjs.map\n","import { Matrix } from '../../../maths/matrix/Matrix.mjs';\nimport { compileHighShaderGpuProgram, compileHighShaderGlProgram } from '../../../rendering/high-shader/compileHighShaderToProgram.mjs';\nimport { localUniformBit, localUniformBitGl } from '../../../rendering/high-shader/shader-bits/localUniformBit.mjs';\nimport { roundPixelsBit, roundPixelsBitGl } from '../../../rendering/high-shader/shader-bits/roundPixelsBit.mjs';\nimport { Shader } from '../../../rendering/renderers/shared/shader/Shader.mjs';\nimport { UniformGroup } from '../../../rendering/renderers/shared/shader/UniformGroup.mjs';\nimport { Texture } from '../../../rendering/renderers/shared/texture/Texture.mjs';\nimport { tilingBit, tilingBitGl } from './tilingBit.mjs';\n\n\"use strict\";\nlet gpuProgram;\nlet glProgram;\nclass TilingSpriteShader extends Shader {\n  constructor() {\n    gpuProgram ?? (gpuProgram = compileHighShaderGpuProgram({\n      name: \"tiling-sprite-shader\",\n      bits: [\n        localUniformBit,\n        tilingBit,\n        roundPixelsBit\n      ]\n    }));\n    glProgram ?? (glProgram = compileHighShaderGlProgram({\n      name: \"tiling-sprite-shader\",\n      bits: [\n        localUniformBitGl,\n        tilingBitGl,\n        roundPixelsBitGl\n      ]\n    }));\n    const tilingUniforms = new UniformGroup({\n      uMapCoord: { value: new Matrix(), type: \"mat3x3<f32>\" },\n      uClampFrame: { value: new Float32Array([0, 0, 1, 1]), type: \"vec4<f32>\" },\n      uClampOffset: { value: new Float32Array([0, 0]), type: \"vec2<f32>\" },\n      uTextureTransform: { value: new Matrix(), type: \"mat3x3<f32>\" },\n      uSizeAnchor: { value: new Float32Array([100, 100, 0.5, 0.5]), type: \"vec4<f32>\" }\n    });\n    super({\n      glProgram,\n      gpuProgram,\n      resources: {\n        localUniforms: new UniformGroup({\n          uTransformMatrix: { value: new Matrix(), type: \"mat3x3<f32>\" },\n          uColor: { value: new Float32Array([1, 1, 1, 1]), type: \"vec4<f32>\" },\n          uRound: { value: 0, type: \"f32\" }\n        }),\n        tilingUniforms,\n        uTexture: Texture.EMPTY.source,\n        uSampler: Texture.EMPTY.source.style\n      }\n    });\n  }\n  updateUniforms(width, height, matrix, anchorX, anchorY, texture) {\n    const tilingUniforms = this.resources.tilingUniforms;\n    const textureWidth = texture.width;\n    const textureHeight = texture.height;\n    const textureMatrix = texture.textureMatrix;\n    const uTextureTransform = tilingUniforms.uniforms.uTextureTransform;\n    uTextureTransform.set(\n      matrix.a * textureWidth / width,\n      matrix.b * textureWidth / height,\n      matrix.c * textureHeight / width,\n      matrix.d * textureHeight / height,\n      matrix.tx / width,\n      matrix.ty / height\n    );\n    uTextureTransform.invert();\n    tilingUniforms.uniforms.uMapCoord = textureMatrix.mapCoord;\n    tilingUniforms.uniforms.uClampFrame = textureMatrix.uClampFrame;\n    tilingUniforms.uniforms.uClampOffset = textureMatrix.uClampOffset;\n    tilingUniforms.uniforms.uTextureTransform = uTextureTransform;\n    tilingUniforms.uniforms.uSizeAnchor[0] = width;\n    tilingUniforms.uniforms.uSizeAnchor[1] = height;\n    tilingUniforms.uniforms.uSizeAnchor[2] = anchorX;\n    tilingUniforms.uniforms.uSizeAnchor[3] = anchorY;\n    if (texture) {\n      this.resources.uTexture = texture.source;\n      this.resources.uSampler = texture.source.style;\n    }\n  }\n}\n\nexport { TilingSpriteShader };\n//# sourceMappingURL=TilingSpriteShader.mjs.map\n","import { MeshGeometry } from '../../mesh/shared/MeshGeometry.mjs';\n\n\"use strict\";\nclass QuadGeometry extends MeshGeometry {\n  constructor() {\n    super({\n      positions: new Float32Array([0, 0, 1, 0, 1, 1, 0, 1]),\n      uvs: new Float32Array([0, 0, 1, 0, 1, 1, 0, 1]),\n      indices: new Uint32Array([0, 1, 2, 0, 2, 3])\n    });\n  }\n}\n\nexport { QuadGeometry };\n//# sourceMappingURL=QuadGeometry.mjs.map\n","\"use strict\";\nfunction setPositions(tilingSprite, positions) {\n  const anchorX = tilingSprite.anchor.x;\n  const anchorY = tilingSprite.anchor.y;\n  positions[0] = -anchorX * tilingSprite.width;\n  positions[1] = -anchorY * tilingSprite.height;\n  positions[2] = (1 - anchorX) * tilingSprite.width;\n  positions[3] = -anchorY * tilingSprite.height;\n  positions[4] = (1 - anchorX) * tilingSprite.width;\n  positions[5] = (1 - anchorY) * tilingSprite.height;\n  positions[6] = -anchorX * tilingSprite.width;\n  positions[7] = (1 - anchorY) * tilingSprite.height;\n}\n\nexport { setPositions };\n//# sourceMappingURL=setPositions.mjs.map\n","\"use strict\";\nfunction applyMatrix(array, stride, offset, matrix) {\n  let index = 0;\n  const size = array.length / (stride || 2);\n  const a = matrix.a;\n  const b = matrix.b;\n  const c = matrix.c;\n  const d = matrix.d;\n  const tx = matrix.tx;\n  const ty = matrix.ty;\n  offset *= stride;\n  while (index < size) {\n    const x = array[offset];\n    const y = array[offset + 1];\n    array[offset] = a * x + c * y + tx;\n    array[offset + 1] = b * x + d * y + ty;\n    offset += stride;\n    index++;\n  }\n}\n\nexport { applyMatrix };\n//# sourceMappingURL=applyMatrix.mjs.map\n","import { Matrix } from '../../../maths/matrix/Matrix.mjs';\nimport { applyMatrix } from './applyMatrix.mjs';\n\n\"use strict\";\nfunction setUvs(tilingSprite, uvs) {\n  const texture = tilingSprite.texture;\n  const width = texture.frame.width;\n  const height = texture.frame.height;\n  let anchorX = 0;\n  let anchorY = 0;\n  if (tilingSprite.applyAnchorToTexture) {\n    anchorX = tilingSprite.anchor.x;\n    anchorY = tilingSprite.anchor.y;\n  }\n  uvs[0] = uvs[6] = -anchorX;\n  uvs[2] = uvs[4] = 1 - anchorX;\n  uvs[1] = uvs[3] = -anchorY;\n  uvs[5] = uvs[7] = 1 - anchorY;\n  const textureMatrix = Matrix.shared;\n  textureMatrix.copyFrom(tilingSprite._tileTransform.matrix);\n  textureMatrix.tx /= tilingSprite.width;\n  textureMatrix.ty /= tilingSprite.height;\n  textureMatrix.invert();\n  textureMatrix.scale(tilingSprite.width / width, tilingSprite.height / height);\n  applyMatrix(uvs, 2, 0, textureMatrix);\n}\n\nexport { setUvs };\n//# sourceMappingURL=setUvs.mjs.map\n","import { ExtensionType } from '../../extensions/Extensions.mjs';\nimport { getAdjustedBlendModeBlend } from '../../rendering/renderers/shared/state/getAdjustedBlendModeBlend.mjs';\nimport { State } from '../../rendering/renderers/shared/state/State.mjs';\nimport { RendererType } from '../../rendering/renderers/types.mjs';\nimport { color32BitToUniform } from '../graphics/gpu/colorToUniform.mjs';\nimport { BatchableMesh } from '../mesh/shared/BatchableMesh.mjs';\nimport { MeshGeometry } from '../mesh/shared/MeshGeometry.mjs';\nimport { TilingSpriteShader } from './shader/TilingSpriteShader.mjs';\nimport { QuadGeometry } from './utils/QuadGeometry.mjs';\nimport { setPositions } from './utils/setPositions.mjs';\nimport { setUvs } from './utils/setUvs.mjs';\n\n\"use strict\";\nconst sharedQuad = new QuadGeometry();\nclass TilingSpriteGpuData {\n  constructor() {\n    this.canBatch = true;\n    this.geometry = new MeshGeometry({\n      indices: sharedQuad.indices.slice(),\n      positions: sharedQuad.positions.slice(),\n      uvs: sharedQuad.uvs.slice()\n    });\n  }\n  destroy() {\n    this.geometry.destroy();\n    this.shader?.destroy();\n  }\n}\nclass TilingSpritePipe {\n  constructor(renderer) {\n    this._state = State.default2d;\n    this._renderer = renderer;\n  }\n  validateRenderable(renderable) {\n    const tilingSpriteData = this._getTilingSpriteData(renderable);\n    const couldBatch = tilingSpriteData.canBatch;\n    this._updateCanBatch(renderable);\n    const canBatch = tilingSpriteData.canBatch;\n    if (canBatch && canBatch === couldBatch) {\n      const { batchableMesh } = tilingSpriteData;\n      return !batchableMesh._batcher.checkAndUpdateTexture(\n        batchableMesh,\n        renderable.texture\n      );\n    }\n    return couldBatch !== canBatch;\n  }\n  addRenderable(tilingSprite, instructionSet) {\n    const batcher = this._renderer.renderPipes.batch;\n    this._updateCanBatch(tilingSprite);\n    const tilingSpriteData = this._getTilingSpriteData(tilingSprite);\n    const { geometry, canBatch } = tilingSpriteData;\n    if (canBatch) {\n      tilingSpriteData.batchableMesh || (tilingSpriteData.batchableMesh = new BatchableMesh());\n      const batchableMesh = tilingSpriteData.batchableMesh;\n      if (tilingSprite.didViewUpdate) {\n        this._updateBatchableMesh(tilingSprite);\n        batchableMesh.geometry = geometry;\n        batchableMesh.renderable = tilingSprite;\n        batchableMesh.transform = tilingSprite.groupTransform;\n        batchableMesh.setTexture(tilingSprite._texture);\n      }\n      batchableMesh.roundPixels = this._renderer._roundPixels | tilingSprite._roundPixels;\n      batcher.addToBatch(batchableMesh, instructionSet);\n    } else {\n      batcher.break(instructionSet);\n      tilingSpriteData.shader || (tilingSpriteData.shader = new TilingSpriteShader());\n      this.updateRenderable(tilingSprite);\n      instructionSet.add(tilingSprite);\n    }\n  }\n  execute(tilingSprite) {\n    const { shader } = this._getTilingSpriteData(tilingSprite);\n    shader.groups[0] = this._renderer.globalUniforms.bindGroup;\n    const localUniforms = shader.resources.localUniforms.uniforms;\n    localUniforms.uTransformMatrix = tilingSprite.groupTransform;\n    localUniforms.uRound = this._renderer._roundPixels | tilingSprite._roundPixels;\n    color32BitToUniform(\n      tilingSprite.groupColorAlpha,\n      localUniforms.uColor,\n      0\n    );\n    this._state.blendMode = getAdjustedBlendModeBlend(tilingSprite.groupBlendMode, tilingSprite.texture._source);\n    this._renderer.encoder.draw({\n      geometry: sharedQuad,\n      shader,\n      state: this._state\n    });\n  }\n  updateRenderable(tilingSprite) {\n    const tilingSpriteData = this._getTilingSpriteData(tilingSprite);\n    const { canBatch } = tilingSpriteData;\n    if (canBatch) {\n      const { batchableMesh } = tilingSpriteData;\n      if (tilingSprite.didViewUpdate)\n        this._updateBatchableMesh(tilingSprite);\n      batchableMesh._batcher.updateElement(batchableMesh);\n    } else if (tilingSprite.didViewUpdate) {\n      const { shader } = tilingSpriteData;\n      shader.updateUniforms(\n        tilingSprite.width,\n        tilingSprite.height,\n        tilingSprite._tileTransform.matrix,\n        tilingSprite.anchor.x,\n        tilingSprite.anchor.y,\n        tilingSprite.texture\n      );\n    }\n  }\n  _getTilingSpriteData(renderable) {\n    return renderable._gpuData[this._renderer.uid] || this._initTilingSpriteData(renderable);\n  }\n  _initTilingSpriteData(tilingSprite) {\n    const gpuData = new TilingSpriteGpuData();\n    gpuData.renderable = tilingSprite;\n    tilingSprite._gpuData[this._renderer.uid] = gpuData;\n    return gpuData;\n  }\n  _updateBatchableMesh(tilingSprite) {\n    const renderableData = this._getTilingSpriteData(tilingSprite);\n    const { geometry } = renderableData;\n    const style = tilingSprite.texture.source.style;\n    if (style.addressMode !== \"repeat\") {\n      style.addressMode = \"repeat\";\n      style.update();\n    }\n    setUvs(tilingSprite, geometry.uvs);\n    setPositions(tilingSprite, geometry.positions);\n  }\n  destroy() {\n    this._renderer = null;\n  }\n  _updateCanBatch(tilingSprite) {\n    const renderableData = this._getTilingSpriteData(tilingSprite);\n    const texture = tilingSprite.texture;\n    let _nonPowOf2wrapping = true;\n    if (this._renderer.type === RendererType.WEBGL) {\n      _nonPowOf2wrapping = this._renderer.context.supports.nonPowOf2wrapping;\n    }\n    renderableData.canBatch = texture.textureMatrix.isSimple && (_nonPowOf2wrapping || texture.source.isPowerOfTwo);\n    return renderableData.canBatch;\n  }\n}\n/** @ignore */\nTilingSpritePipe.extension = {\n  type: [\n    ExtensionType.WebGLPipes,\n    ExtensionType.WebGPUPipes,\n    ExtensionType.CanvasPipes\n  ],\n  name: \"tilingSprite\"\n};\n\nexport { TilingSpriteGpuData, TilingSpritePipe };\n//# sourceMappingURL=TilingSpritePipe.mjs.map\n","\"use strict\";\nconst localUniformMSDFBit = {\n  name: \"local-uniform-msdf-bit\",\n  vertex: {\n    header: (\n      /* wgsl */\n      `\n            struct LocalUniforms {\n                uColor:vec4<f32>,\n                uTransformMatrix:mat3x3<f32>,\n                uDistance: f32,\n                uRound:f32,\n            }\n\n            @group(2) @binding(0) var<uniform> localUniforms : LocalUniforms;\n        `\n    ),\n    main: (\n      /* wgsl */\n      `\n            vColor *= localUniforms.uColor;\n            modelMatrix *= localUniforms.uTransformMatrix;\n        `\n    ),\n    end: (\n      /* wgsl */\n      `\n            if(localUniforms.uRound == 1)\n            {\n                vPosition = vec4(roundPixels(vPosition.xy, globalUniforms.uResolution), vPosition.zw);\n            }\n        `\n    )\n  },\n  fragment: {\n    header: (\n      /* wgsl */\n      `\n            struct LocalUniforms {\n                uColor:vec4<f32>,\n                uTransformMatrix:mat3x3<f32>,\n                uDistance: f32\n            }\n\n            @group(2) @binding(0) var<uniform> localUniforms : LocalUniforms;\n         `\n    ),\n    main: (\n      /* wgsl */\n      `\n            outColor = vec4<f32>(calculateMSDFAlpha(outColor, localUniforms.uColor, localUniforms.uDistance));\n        `\n    )\n  }\n};\nconst localUniformMSDFBitGl = {\n  name: \"local-uniform-msdf-bit\",\n  vertex: {\n    header: (\n      /* glsl */\n      `\n            uniform mat3 uTransformMatrix;\n            uniform vec4 uColor;\n            uniform float uRound;\n        `\n    ),\n    main: (\n      /* glsl */\n      `\n            vColor *= uColor;\n            modelMatrix *= uTransformMatrix;\n        `\n    ),\n    end: (\n      /* glsl */\n      `\n            if(uRound == 1.)\n            {\n                gl_Position.xy = roundPixels(gl_Position.xy, uResolution);\n            }\n        `\n    )\n  },\n  fragment: {\n    header: (\n      /* glsl */\n      `\n            uniform float uDistance;\n         `\n    ),\n    main: (\n      /* glsl */\n      `\n            outColor = vec4(calculateMSDFAlpha(outColor, vColor, uDistance));\n        `\n    )\n  }\n};\n\nexport { localUniformMSDFBit, localUniformMSDFBitGl };\n//# sourceMappingURL=localUniformMSDFBit.mjs.map\n","\"use strict\";\nconst mSDFBit = {\n  name: \"msdf-bit\",\n  fragment: {\n    header: (\n      /* wgsl */\n      `\n            fn calculateMSDFAlpha(msdfColor:vec4<f32>, shapeColor:vec4<f32>, distance:f32) -> f32 {\n\n                // MSDF\n                var median = msdfColor.r + msdfColor.g + msdfColor.b -\n                    min(msdfColor.r, min(msdfColor.g, msdfColor.b)) -\n                    max(msdfColor.r, max(msdfColor.g, msdfColor.b));\n\n                // SDF\n                median = min(median, msdfColor.a);\n\n                var screenPxDistance = distance * (median - 0.5);\n                var alpha = clamp(screenPxDistance + 0.5, 0.0, 1.0);\n                if (median < 0.01) {\n                    alpha = 0.0;\n                } else if (median > 0.99) {\n                    alpha = 1.0;\n                }\n\n                // Gamma correction for coverage-like alpha\n                var luma: f32 = dot(shapeColor.rgb, vec3<f32>(0.299, 0.587, 0.114));\n                var gamma: f32 = mix(1.0, 1.0 / 2.2, luma);\n                var coverage: f32 = pow(shapeColor.a * alpha, gamma);\n\n                return coverage;\n\n            }\n        `\n    )\n  }\n};\nconst mSDFBitGl = {\n  name: \"msdf-bit\",\n  fragment: {\n    header: (\n      /* glsl */\n      `\n            float calculateMSDFAlpha(vec4 msdfColor, vec4 shapeColor, float distance) {\n\n                // MSDF\n                float median = msdfColor.r + msdfColor.g + msdfColor.b -\n                                min(msdfColor.r, min(msdfColor.g, msdfColor.b)) -\n                                max(msdfColor.r, max(msdfColor.g, msdfColor.b));\n\n                // SDF\n                median = min(median, msdfColor.a);\n\n                float screenPxDistance = distance * (median - 0.5);\n                float alpha = clamp(screenPxDistance + 0.5, 0.0, 1.0);\n\n                if (median < 0.01) {\n                    alpha = 0.0;\n                } else if (median > 0.99) {\n                    alpha = 1.0;\n                }\n\n                // Gamma correction for coverage-like alpha\n                float luma = dot(shapeColor.rgb, vec3(0.299, 0.587, 0.114));\n                float gamma = mix(1.0, 1.0 / 2.2, luma);\n                float coverage = pow(shapeColor.a * alpha, gamma);\n\n                return coverage;\n            }\n        `\n    )\n  }\n};\n\nexport { mSDFBit, mSDFBitGl };\n//# sourceMappingURL=mSDFBit.mjs.map\n","import { Matrix } from '../../../maths/matrix/Matrix.mjs';\nimport { compileHighShaderGpuProgram, compileHighShaderGlProgram } from '../../../rendering/high-shader/compileHighShaderToProgram.mjs';\nimport { colorBit, colorBitGl } from '../../../rendering/high-shader/shader-bits/colorBit.mjs';\nimport { generateTextureBatchBit, generateTextureBatchBitGl } from '../../../rendering/high-shader/shader-bits/generateTextureBatchBit.mjs';\nimport { roundPixelsBit, roundPixelsBitGl } from '../../../rendering/high-shader/shader-bits/roundPixelsBit.mjs';\nimport { getBatchSamplersUniformGroup } from '../../../rendering/renderers/gl/shader/getBatchSamplersUniformGroup.mjs';\nimport { Shader } from '../../../rendering/renderers/shared/shader/Shader.mjs';\nimport { UniformGroup } from '../../../rendering/renderers/shared/shader/UniformGroup.mjs';\nimport { localUniformMSDFBit, localUniformMSDFBitGl } from './shader-bits/localUniformMSDFBit.mjs';\nimport { mSDFBit, mSDFBitGl } from './shader-bits/mSDFBit.mjs';\n\n\"use strict\";\nlet gpuProgram;\nlet glProgram;\nclass SdfShader extends Shader {\n  constructor(maxTextures) {\n    const uniforms = new UniformGroup({\n      uColor: { value: new Float32Array([1, 1, 1, 1]), type: \"vec4<f32>\" },\n      uTransformMatrix: { value: new Matrix(), type: \"mat3x3<f32>\" },\n      uDistance: { value: 4, type: \"f32\" },\n      uRound: { value: 0, type: \"f32\" }\n    });\n    gpuProgram ?? (gpuProgram = compileHighShaderGpuProgram({\n      name: \"sdf-shader\",\n      bits: [\n        colorBit,\n        generateTextureBatchBit(maxTextures),\n        localUniformMSDFBit,\n        mSDFBit,\n        roundPixelsBit\n      ]\n    }));\n    glProgram ?? (glProgram = compileHighShaderGlProgram({\n      name: \"sdf-shader\",\n      bits: [\n        colorBitGl,\n        generateTextureBatchBitGl(maxTextures),\n        localUniformMSDFBitGl,\n        mSDFBitGl,\n        roundPixelsBitGl\n      ]\n    }));\n    super({\n      glProgram,\n      gpuProgram,\n      resources: {\n        localUniforms: uniforms,\n        batchSamplers: getBatchSamplersUniformGroup(maxTextures)\n      }\n    });\n  }\n}\n\nexport { SdfShader };\n//# sourceMappingURL=SdfShader.mjs.map\n","import { Cache } from '../../assets/cache/Cache.mjs';\nimport { ExtensionType } from '../../extensions/Extensions.mjs';\nimport { Graphics } from '../graphics/shared/Graphics.mjs';\nimport { CanvasTextMetrics } from '../text/canvas/CanvasTextMetrics.mjs';\nimport { SdfShader } from '../text/sdfShader/SdfShader.mjs';\nimport { BitmapFontManager } from './BitmapFontManager.mjs';\nimport { getBitmapTextLayout } from './utils/getBitmapTextLayout.mjs';\n\n\"use strict\";\nclass BitmapTextGraphics extends Graphics {\n  destroy() {\n    if (this.context.customShader) {\n      this.context.customShader.destroy();\n    }\n    super.destroy();\n  }\n}\nclass BitmapTextPipe {\n  constructor(renderer) {\n    this._renderer = renderer;\n  }\n  validateRenderable(bitmapText) {\n    const graphicsRenderable = this._getGpuBitmapText(bitmapText);\n    return this._renderer.renderPipes.graphics.validateRenderable(graphicsRenderable);\n  }\n  addRenderable(bitmapText, instructionSet) {\n    const graphicsRenderable = this._getGpuBitmapText(bitmapText);\n    syncWithProxy(bitmapText, graphicsRenderable);\n    if (bitmapText._didTextUpdate) {\n      bitmapText._didTextUpdate = false;\n      this._updateContext(bitmapText, graphicsRenderable);\n    }\n    this._renderer.renderPipes.graphics.addRenderable(graphicsRenderable, instructionSet);\n    if (graphicsRenderable.context.customShader) {\n      this._updateDistanceField(bitmapText);\n    }\n  }\n  updateRenderable(bitmapText) {\n    const graphicsRenderable = this._getGpuBitmapText(bitmapText);\n    syncWithProxy(bitmapText, graphicsRenderable);\n    this._renderer.renderPipes.graphics.updateRenderable(graphicsRenderable);\n    if (graphicsRenderable.context.customShader) {\n      this._updateDistanceField(bitmapText);\n    }\n  }\n  _updateContext(bitmapText, proxyGraphics) {\n    const { context } = proxyGraphics;\n    const bitmapFont = BitmapFontManager.getFont(bitmapText.text, bitmapText._style);\n    context.clear();\n    if (bitmapFont.distanceField.type !== \"none\") {\n      if (!context.customShader) {\n        context.customShader = new SdfShader(this._renderer.limits.maxBatchableTextures);\n      }\n    }\n    const chars = CanvasTextMetrics.graphemeSegmenter(bitmapText.text);\n    const style = bitmapText._style;\n    let currentY = bitmapFont.baseLineOffset;\n    const bitmapTextLayout = getBitmapTextLayout(chars, style, bitmapFont, true);\n    const padding = style.padding;\n    const scale = bitmapTextLayout.scale;\n    let tx = bitmapTextLayout.width;\n    let ty = bitmapTextLayout.height + bitmapTextLayout.offsetY;\n    if (style._stroke) {\n      tx += style._stroke.width / scale;\n      ty += style._stroke.width / scale;\n    }\n    context.translate(-bitmapText._anchor._x * tx - padding, -bitmapText._anchor._y * ty - padding).scale(scale, scale);\n    const tint = bitmapFont.applyFillAsTint ? style._fill.color : 16777215;\n    let fontSize = bitmapFont.fontMetrics.fontSize;\n    let lineHeight = bitmapFont.lineHeight;\n    if (style.lineHeight) {\n      fontSize = style.fontSize / scale;\n      lineHeight = style.lineHeight / scale;\n    }\n    let linePositionYShift = (lineHeight - fontSize) / 2;\n    if (linePositionYShift - bitmapFont.baseLineOffset < 0) {\n      linePositionYShift = 0;\n    }\n    for (let i = 0; i < bitmapTextLayout.lines.length; i++) {\n      const line = bitmapTextLayout.lines[i];\n      for (let j = 0; j < line.charPositions.length; j++) {\n        const char = line.chars[j];\n        const charData = bitmapFont.chars[char];\n        if (charData?.texture) {\n          const texture = charData.texture;\n          context.texture(\n            texture,\n            tint ? tint : \"black\",\n            Math.round(line.charPositions[j] + charData.xOffset),\n            Math.round(currentY + charData.yOffset + linePositionYShift),\n            texture.orig.width,\n            texture.orig.height\n          );\n        }\n      }\n      currentY += lineHeight;\n    }\n  }\n  _getGpuBitmapText(bitmapText) {\n    return bitmapText._gpuData[this._renderer.uid] || this.initGpuText(bitmapText);\n  }\n  initGpuText(bitmapText) {\n    const proxyRenderable = new BitmapTextGraphics();\n    bitmapText._gpuData[this._renderer.uid] = proxyRenderable;\n    this._updateContext(bitmapText, proxyRenderable);\n    return proxyRenderable;\n  }\n  _updateDistanceField(bitmapText) {\n    const context = this._getGpuBitmapText(bitmapText).context;\n    const fontFamily = bitmapText._style.fontFamily;\n    const dynamicFont = Cache.get(`${fontFamily}-bitmap`);\n    const { a, b, c, d } = bitmapText.groupTransform;\n    const dx = Math.sqrt(a * a + b * b);\n    const dy = Math.sqrt(c * c + d * d);\n    const worldScale = (Math.abs(dx) + Math.abs(dy)) / 2;\n    const fontScale = dynamicFont.baseRenderedFontSize / bitmapText._style.fontSize;\n    const distance = worldScale * dynamicFont.distanceField.range * (1 / fontScale);\n    context.customShader.resources.localUniforms.uniforms.uDistance = distance;\n  }\n  destroy() {\n    this._renderer = null;\n  }\n}\n/** @ignore */\nBitmapTextPipe.extension = {\n  type: [\n    ExtensionType.WebGLPipes,\n    ExtensionType.WebGPUPipes,\n    ExtensionType.CanvasPipes\n  ],\n  name: \"bitmapText\"\n};\nfunction syncWithProxy(container, proxy) {\n  proxy.groupTransform = container.groupTransform;\n  proxy.groupColorAlpha = container.groupColorAlpha;\n  proxy.groupColor = container.groupColor;\n  proxy.groupBlendMode = container.groupBlendMode;\n  proxy.globalDisplayStatus = container.globalDisplayStatus;\n  proxy.groupTransform = container.groupTransform;\n  proxy.localDisplayStatus = container.localDisplayStatus;\n  proxy.groupAlpha = container.groupAlpha;\n  proxy._roundPixels = container._roundPixels;\n}\n\nexport { BitmapTextGraphics, BitmapTextPipe };\n//# sourceMappingURL=BitmapTextPipe.mjs.map\n","import { BatchableSprite } from '../sprite/BatchableSprite.mjs';\n\n\"use strict\";\nclass BatchableHTMLText extends BatchableSprite {\n  /**\n   * Creates an instance of BatchableHTMLText.\n   * @param renderer - The renderer instance to be used.\n   */\n  constructor(renderer) {\n    super();\n    this.generatingTexture = false;\n    this.currentKey = \"--\";\n    this._renderer = renderer;\n    renderer.runners.resolutionChange.add(this);\n  }\n  /** Handles resolution changes for the HTML text. If the text has auto resolution enabled, it triggers a view update. */\n  resolutionChange() {\n    const text = this.renderable;\n    if (text._autoResolution) {\n      text.onViewUpdate();\n    }\n  }\n  /** Destroys the BatchableHTMLText instance. Returns the texture promise to the renderer and cleans up references. */\n  destroy() {\n    const { htmlText } = this._renderer;\n    htmlText.getReferenceCount(this.currentKey) === null ? htmlText.returnTexturePromise(this.texturePromise) : htmlText.decreaseReferenceCount(this.currentKey);\n    this._renderer.runners.resolutionChange.remove(this);\n    this.texturePromise = null;\n    this._renderer = null;\n  }\n}\n\nexport { BatchableHTMLText };\n//# sourceMappingURL=BatchableHTMLText.mjs.map\n","import { updateQuadBounds } from '../../../utils/data/updateQuadBounds.mjs';\n\n\"use strict\";\nfunction updateTextBounds(batchableSprite, text) {\n  const { texture, bounds } = batchableSprite;\n  const padding = text._style._getFinalPadding();\n  updateQuadBounds(bounds, text._anchor, texture);\n  const paddingOffset = text._anchor._x * padding * 2;\n  const paddingOffsetY = text._anchor._y * padding * 2;\n  bounds.minX -= padding - paddingOffset;\n  bounds.minY -= padding - paddingOffsetY;\n  bounds.maxX -= padding - paddingOffset;\n  bounds.maxY -= padding - paddingOffsetY;\n}\n\nexport { updateTextBounds };\n//# sourceMappingURL=updateTextBounds.mjs.map\n","import { ExtensionType } from '../../extensions/Extensions.mjs';\nimport { Texture } from '../../rendering/renderers/shared/texture/Texture.mjs';\nimport { updateTextBounds } from '../text/utils/updateTextBounds.mjs';\nimport { BatchableHTMLText } from './BatchableHTMLText.mjs';\n\n\"use strict\";\nclass HTMLTextPipe {\n  constructor(renderer) {\n    this._renderer = renderer;\n  }\n  validateRenderable(htmlText) {\n    const gpuText = this._getGpuText(htmlText);\n    const newKey = htmlText.styleKey;\n    if (gpuText.currentKey !== newKey) {\n      return true;\n    }\n    return false;\n  }\n  addRenderable(htmlText, instructionSet) {\n    const batchableHTMLText = this._getGpuText(htmlText);\n    if (htmlText._didTextUpdate) {\n      const resolution = htmlText._autoResolution ? this._renderer.resolution : htmlText.resolution;\n      if (batchableHTMLText.currentKey !== htmlText.styleKey || htmlText.resolution !== resolution) {\n        this._updateGpuText(htmlText).catch((e) => {\n          console.error(e);\n        });\n      }\n      htmlText._didTextUpdate = false;\n      updateTextBounds(batchableHTMLText, htmlText);\n    }\n    this._renderer.renderPipes.batch.addToBatch(batchableHTMLText, instructionSet);\n  }\n  updateRenderable(htmlText) {\n    const batchableHTMLText = this._getGpuText(htmlText);\n    batchableHTMLText._batcher.updateElement(batchableHTMLText);\n  }\n  async _updateGpuText(htmlText) {\n    htmlText._didTextUpdate = false;\n    const batchableHTMLText = this._getGpuText(htmlText);\n    if (batchableHTMLText.generatingTexture)\n      return;\n    const oldTexturePromise = batchableHTMLText.texturePromise;\n    batchableHTMLText.texturePromise = null;\n    batchableHTMLText.generatingTexture = true;\n    htmlText._resolution = htmlText._autoResolution ? this._renderer.resolution : htmlText.resolution;\n    let texturePromise = this._renderer.htmlText.getTexturePromise(htmlText);\n    if (oldTexturePromise) {\n      texturePromise = texturePromise.finally(() => {\n        this._renderer.htmlText.decreaseReferenceCount(batchableHTMLText.currentKey);\n        this._renderer.htmlText.returnTexturePromise(oldTexturePromise);\n      });\n    }\n    batchableHTMLText.texturePromise = texturePromise;\n    batchableHTMLText.currentKey = htmlText.styleKey;\n    batchableHTMLText.texture = await texturePromise;\n    const renderGroup = htmlText.renderGroup || htmlText.parentRenderGroup;\n    if (renderGroup) {\n      renderGroup.structureDidChange = true;\n    }\n    batchableHTMLText.generatingTexture = false;\n    updateTextBounds(batchableHTMLText, htmlText);\n  }\n  _getGpuText(htmlText) {\n    return htmlText._gpuData[this._renderer.uid] || this.initGpuText(htmlText);\n  }\n  initGpuText(htmlText) {\n    const batchableHTMLText = new BatchableHTMLText(this._renderer);\n    batchableHTMLText.renderable = htmlText;\n    batchableHTMLText.transform = htmlText.groupTransform;\n    batchableHTMLText.texture = Texture.EMPTY;\n    batchableHTMLText.bounds = { minX: 0, maxX: 1, minY: 0, maxY: 0 };\n    batchableHTMLText.roundPixels = this._renderer._roundPixels | htmlText._roundPixels;\n    htmlText._resolution = htmlText._autoResolution ? this._renderer.resolution : htmlText.resolution;\n    htmlText._gpuData[this._renderer.uid] = batchableHTMLText;\n    return batchableHTMLText;\n  }\n  destroy() {\n    this._renderer = null;\n  }\n}\n/** @ignore */\nHTMLTextPipe.extension = {\n  type: [\n    ExtensionType.WebGLPipes,\n    ExtensionType.WebGPUPipes,\n    ExtensionType.CanvasPipes\n  ],\n  name: \"htmlText\"\n};\n\nexport { HTMLTextPipe };\n//# sourceMappingURL=HTMLTextPipe.mjs.map\n","import { DOMAdapter } from '../../environment/adapter.mjs';\n\n\"use strict\";\nfunction isSafari() {\n  const { userAgent } = DOMAdapter.get().getNavigator();\n  return /^((?!chrome|android).)*safari/i.test(userAgent);\n}\n\nexport { isSafari };\n//# sourceMappingURL=isSafari.mjs.map\n","import { TexturePool } from '../../../rendering/renderers/shared/texture/TexturePool.mjs';\nimport { Bounds } from '../../container/bounds/Bounds.mjs';\n\n\"use strict\";\nconst tempBounds = new Bounds();\nfunction getPo2TextureFromSource(image, width, height, resolution) {\n  const bounds = tempBounds;\n  bounds.minX = 0;\n  bounds.minY = 0;\n  bounds.maxX = image.width / resolution | 0;\n  bounds.maxY = image.height / resolution | 0;\n  const texture = TexturePool.getOptimalTexture(\n    bounds.width,\n    bounds.height,\n    resolution,\n    false\n  );\n  texture.source.uploadMethodId = \"image\";\n  texture.source.resource = image;\n  texture.source.alphaMode = \"premultiply-alpha-on-upload\";\n  texture.frame.width = width / resolution;\n  texture.frame.height = height / resolution;\n  texture.source.emit(\"update\", texture.source);\n  texture.updateUvs();\n  return texture;\n}\n\nexport { getPo2TextureFromSource };\n//# sourceMappingURL=getPo2TextureFromSource.mjs.map\n","\"use strict\";\nfunction extractFontFamilies(text, style) {\n  const fontFamily = style.fontFamily;\n  const fontFamilies = [];\n  const dedupe = {};\n  const regex = /font-family:([^;\"\\s]+)/g;\n  const matches = text.match(regex);\n  function addFontFamily(fontFamily2) {\n    if (!dedupe[fontFamily2]) {\n      fontFamilies.push(fontFamily2);\n      dedupe[fontFamily2] = true;\n    }\n  }\n  if (Array.isArray(fontFamily)) {\n    for (let i = 0; i < fontFamily.length; i++) {\n      addFontFamily(fontFamily[i]);\n    }\n  } else {\n    addFontFamily(fontFamily);\n  }\n  if (matches) {\n    matches.forEach((match) => {\n      const fontFamily2 = match.split(\":\")[1].trim();\n      addFontFamily(fontFamily2);\n    });\n  }\n  for (const i in style.tagStyles) {\n    const fontFamily2 = style.tagStyles[i].fontFamily;\n    addFontFamily(fontFamily2);\n  }\n  return fontFamilies;\n}\n\nexport { extractFontFamilies };\n//# sourceMappingURL=extractFontFamilies.mjs.map\n","import { DOMAdapter } from '../../../environment/adapter.mjs';\n\n\"use strict\";\nasync function loadFontAsBase64(url) {\n  const response = await DOMAdapter.get().fetch(url);\n  const blob = await response.blob();\n  const reader = new FileReader();\n  const dataSrc = await new Promise((resolve, reject) => {\n    reader.onloadend = () => resolve(reader.result);\n    reader.onerror = reject;\n    reader.readAsDataURL(blob);\n  });\n  return dataSrc;\n}\n\nexport { loadFontAsBase64 };\n//# sourceMappingURL=loadFontAsBase64.mjs.map\n","import { loadFontAsBase64 } from './loadFontAsBase64.mjs';\n\n\"use strict\";\nasync function loadFontCSS(style, url) {\n  const dataSrc = await loadFontAsBase64(url);\n  return `@font-face {\n        font-family: \"${style.fontFamily}\";\n        font-weight: ${style.fontWeight};\n        font-style: ${style.fontStyle};\n        src: url('${dataSrc}');\n    }`;\n}\n\nexport { loadFontCSS };\n//# sourceMappingURL=loadFontCSS.mjs.map\n","import { Cache } from '../../../assets/cache/Cache.mjs';\nimport { loadFontCSS } from './loadFontCSS.mjs';\n\n\"use strict\";\nconst FontStylePromiseCache = /* @__PURE__ */ new Map();\nasync function getFontCss(fontFamilies) {\n  const fontPromises = fontFamilies.filter((fontFamily) => Cache.has(`${fontFamily}-and-url`)).map((fontFamily) => {\n    if (!FontStylePromiseCache.has(fontFamily)) {\n      const { entries } = Cache.get(`${fontFamily}-and-url`);\n      const promises = [];\n      entries.forEach((entry) => {\n        const url = entry.url;\n        const faces = entry.faces;\n        const out = faces.map((face) => ({ weight: face.weight, style: face.style }));\n        promises.push(\n          ...out.map(\n            (style) => loadFontCSS(\n              {\n                fontWeight: style.weight,\n                fontStyle: style.style,\n                fontFamily\n              },\n              url\n            )\n          )\n        );\n      });\n      FontStylePromiseCache.set(\n        fontFamily,\n        Promise.all(promises).then((css) => css.join(\"\\n\"))\n      );\n    }\n    return FontStylePromiseCache.get(fontFamily);\n  });\n  return (await Promise.all(fontPromises)).join(\"\\n\");\n}\n\nexport { FontStylePromiseCache, getFontCss };\n//# sourceMappingURL=getFontCss.mjs.map\n","\"use strict\";\nfunction getSVGUrl(text, style, resolution, fontCSS, htmlTextData) {\n  const { domElement, styleElement, svgRoot } = htmlTextData;\n  domElement.innerHTML = `<style>${style.cssStyle}</style><div style='padding:0;'>${text}</div>`;\n  domElement.setAttribute(\"style\", `transform: scale(${resolution});transform-origin: top left; display: inline-block`);\n  styleElement.textContent = fontCSS;\n  const { width, height } = htmlTextData.image;\n  svgRoot.setAttribute(\"width\", width.toString());\n  svgRoot.setAttribute(\"height\", height.toString());\n  return new XMLSerializer().serializeToString(svgRoot);\n}\n\nexport { getSVGUrl };\n//# sourceMappingURL=getSVGUrl.mjs.map\n","import { CanvasPool } from '../../../rendering/renderers/shared/texture/CanvasPool.mjs';\n\n\"use strict\";\nfunction getTemporaryCanvasFromImage(image, resolution) {\n  const canvasAndContext = CanvasPool.getOptimalCanvasAndContext(\n    image.width,\n    image.height,\n    resolution\n  );\n  const { context } = canvasAndContext;\n  context.clearRect(0, 0, image.width, image.height);\n  context.drawImage(image, 0, 0);\n  return canvasAndContext;\n}\n\nexport { getTemporaryCanvasFromImage };\n//# sourceMappingURL=getTemporaryCanvasFromImage.mjs.map\n","\"use strict\";\nfunction loadSVGImage(image, url, delay) {\n  return new Promise(async (resolve) => {\n    if (delay) {\n      await new Promise((resolve2) => setTimeout(resolve2, 100));\n    }\n    image.onload = () => {\n      resolve();\n    };\n    image.src = `data:image/svg+xml;charset=utf8,${encodeURIComponent(url)}`;\n    image.crossOrigin = \"anonymous\";\n  });\n}\n\nexport { loadSVGImage };\n//# sourceMappingURL=loadSVGImage.mjs.map\n","import { ExtensionType } from '../../extensions/Extensions.mjs';\nimport { CanvasPool } from '../../rendering/renderers/shared/texture/CanvasPool.mjs';\nimport { TexturePool } from '../../rendering/renderers/shared/texture/TexturePool.mjs';\nimport { RendererType } from '../../rendering/renderers/types.mjs';\nimport { isSafari } from '../../utils/browser/isSafari.mjs';\nimport { warn } from '../../utils/logging/warn.mjs';\nimport { BigPool } from '../../utils/pool/PoolGroup.mjs';\nimport { getPo2TextureFromSource } from '../text/utils/getPo2TextureFromSource.mjs';\nimport { HTMLTextRenderData } from './HTMLTextRenderData.mjs';\nimport { extractFontFamilies } from './utils/extractFontFamilies.mjs';\nimport { getFontCss } from './utils/getFontCss.mjs';\nimport { getSVGUrl } from './utils/getSVGUrl.mjs';\nimport { getTemporaryCanvasFromImage } from './utils/getTemporaryCanvasFromImage.mjs';\nimport { loadSVGImage } from './utils/loadSVGImage.mjs';\nimport { measureHtmlText } from './utils/measureHtmlText.mjs';\n\n\"use strict\";\nclass HTMLTextSystem {\n  constructor(renderer) {\n    this._activeTextures = {};\n    this._renderer = renderer;\n    this._createCanvas = renderer.type === RendererType.WEBGPU;\n  }\n  /**\n   * @param options\n   * @deprecated Use getTexturePromise instead\n   */\n  getTexture(options) {\n    return this.getTexturePromise(options);\n  }\n  /**\n   * Increases the reference count for a texture.\n   * @param text - The HTMLText instance associated with the texture.\n   */\n  getManagedTexture(text) {\n    const textKey = text.styleKey;\n    if (this._activeTextures[textKey]) {\n      this._increaseReferenceCount(textKey);\n      return this._activeTextures[textKey].promise;\n    }\n    const promise = this._buildTexturePromise(text).then((texture) => {\n      this._activeTextures[textKey].texture = texture;\n      return texture;\n    });\n    this._activeTextures[textKey] = {\n      texture: null,\n      promise,\n      usageCount: 1\n    };\n    return promise;\n  }\n  /**\n   * Gets the current reference count for a texture associated with a text key.\n   * @param textKey - The unique key identifying the text style configuration\n   * @returns The number of Text instances currently using this texture\n   */\n  getReferenceCount(textKey) {\n    return this._activeTextures[textKey]?.usageCount ?? null;\n  }\n  _increaseReferenceCount(textKey) {\n    this._activeTextures[textKey].usageCount++;\n  }\n  /**\n   * Decreases the reference count for a texture.\n   * If the count reaches zero, the texture is cleaned up.\n   * @param textKey - The key associated with the HTMLText instance.\n   */\n  decreaseReferenceCount(textKey) {\n    const activeTexture = this._activeTextures[textKey];\n    if (!activeTexture)\n      return;\n    activeTexture.usageCount--;\n    if (activeTexture.usageCount === 0) {\n      if (activeTexture.texture) {\n        this._cleanUp(activeTexture.texture);\n      } else {\n        activeTexture.promise.then((texture) => {\n          activeTexture.texture = texture;\n          this._cleanUp(activeTexture.texture);\n        }).catch(() => {\n          warn(\"HTMLTextSystem: Failed to clean texture\");\n        });\n      }\n      this._activeTextures[textKey] = null;\n    }\n  }\n  /**\n   * Returns a promise that resolves to a texture for the given HTMLText options.\n   * @param options - The options for the HTMLText.\n   * @returns A promise that resolves to a Texture.\n   */\n  getTexturePromise(options) {\n    return this._buildTexturePromise(options);\n  }\n  async _buildTexturePromise(options) {\n    const { text, style, resolution, textureStyle } = options;\n    const htmlTextData = BigPool.get(HTMLTextRenderData);\n    const fontFamilies = extractFontFamilies(text, style);\n    const fontCSS = await getFontCss(fontFamilies);\n    const measured = measureHtmlText(text, style, fontCSS, htmlTextData);\n    const width = Math.ceil(Math.ceil(Math.max(1, measured.width) + style.padding * 2) * resolution);\n    const height = Math.ceil(Math.ceil(Math.max(1, measured.height) + style.padding * 2) * resolution);\n    const image = htmlTextData.image;\n    const uvSafeOffset = 2;\n    image.width = (width | 0) + uvSafeOffset;\n    image.height = (height | 0) + uvSafeOffset;\n    const svgURL = getSVGUrl(text, style, resolution, fontCSS, htmlTextData);\n    await loadSVGImage(image, svgURL, isSafari() && fontFamilies.length > 0);\n    const resource = image;\n    let canvasAndContext;\n    if (this._createCanvas) {\n      canvasAndContext = getTemporaryCanvasFromImage(image, resolution);\n    }\n    const texture = getPo2TextureFromSource(\n      canvasAndContext ? canvasAndContext.canvas : resource,\n      image.width - uvSafeOffset,\n      image.height - uvSafeOffset,\n      resolution\n    );\n    if (textureStyle)\n      texture.source.style = textureStyle;\n    if (this._createCanvas) {\n      this._renderer.texture.initSource(texture.source);\n      CanvasPool.returnCanvasAndContext(canvasAndContext);\n    }\n    BigPool.return(htmlTextData);\n    return texture;\n  }\n  returnTexturePromise(texturePromise) {\n    texturePromise.then((texture) => {\n      this._cleanUp(texture);\n    }).catch(() => {\n      warn(\"HTMLTextSystem: Failed to clean texture\");\n    });\n  }\n  _cleanUp(texture) {\n    TexturePool.returnTexture(texture, true);\n    texture.source.resource = null;\n    texture.source.uploadMethodId = \"unknown\";\n  }\n  destroy() {\n    this._renderer = null;\n    for (const key in this._activeTextures) {\n      if (this._activeTextures[key])\n        this.returnTexturePromise(this._activeTextures[key].promise);\n    }\n    this._activeTextures = null;\n  }\n}\n/** @ignore */\nHTMLTextSystem.extension = {\n  type: [\n    ExtensionType.WebGLSystem,\n    ExtensionType.WebGPUSystem,\n    ExtensionType.CanvasSystem\n  ],\n  name: \"htmlText\"\n};\n\nexport { HTMLTextSystem };\n//# sourceMappingURL=HTMLTextSystem.mjs.map\n","import { BatchableSprite } from '../../sprite/BatchableSprite.mjs';\n\n\"use strict\";\nclass BatchableText extends BatchableSprite {\n  constructor(renderer) {\n    super();\n    this._renderer = renderer;\n    renderer.runners.resolutionChange.add(this);\n  }\n  resolutionChange() {\n    const text = this.renderable;\n    if (text._autoResolution) {\n      text.onViewUpdate();\n    }\n  }\n  destroy() {\n    const { canvasText } = this._renderer;\n    const refCount = canvasText.getReferenceCount(this.currentKey);\n    if (refCount > 0) {\n      canvasText.decreaseReferenceCount(this.currentKey);\n    } else if (this.texture) {\n      canvasText.returnTexture(this.texture);\n    }\n    this._renderer.runners.resolutionChange.remove(this);\n    this._renderer = null;\n  }\n}\n\nexport { BatchableText };\n//# sourceMappingURL=BatchableText.mjs.map\n","import { ExtensionType } from '../../../extensions/Extensions.mjs';\nimport { updateTextBounds } from '../utils/updateTextBounds.mjs';\nimport { BatchableText } from './BatchableText.mjs';\n\n\"use strict\";\nclass CanvasTextPipe {\n  constructor(renderer) {\n    this._renderer = renderer;\n  }\n  validateRenderable(text) {\n    const gpuText = this._getGpuText(text);\n    const newKey = text.styleKey;\n    if (gpuText.currentKey !== newKey)\n      return true;\n    return text._didTextUpdate;\n  }\n  addRenderable(text, instructionSet) {\n    const batchableText = this._getGpuText(text);\n    if (text._didTextUpdate) {\n      const resolution = text._autoResolution ? this._renderer.resolution : text.resolution;\n      if (batchableText.currentKey !== text.styleKey || text.resolution !== resolution) {\n        this._updateGpuText(text);\n      }\n      text._didTextUpdate = false;\n    }\n    this._renderer.renderPipes.batch.addToBatch(batchableText, instructionSet);\n  }\n  updateRenderable(text) {\n    const batchableText = this._getGpuText(text);\n    batchableText._batcher.updateElement(batchableText);\n  }\n  _updateGpuText(text) {\n    const batchableText = this._getGpuText(text);\n    if (batchableText.texture) {\n      this._renderer.canvasText.decreaseReferenceCount(batchableText.currentKey);\n    }\n    text._resolution = text._autoResolution ? this._renderer.resolution : text.resolution;\n    batchableText.texture = this._renderer.canvasText.getManagedTexture(text);\n    batchableText.currentKey = text.styleKey;\n    updateTextBounds(batchableText, text);\n  }\n  _getGpuText(text) {\n    return text._gpuData[this._renderer.uid] || this.initGpuText(text);\n  }\n  initGpuText(text) {\n    const batchableText = new BatchableText(this._renderer);\n    batchableText.currentKey = \"--\";\n    batchableText.renderable = text;\n    batchableText.transform = text.groupTransform;\n    batchableText.bounds = { minX: 0, maxX: 1, minY: 0, maxY: 0 };\n    batchableText.roundPixels = this._renderer._roundPixels | text._roundPixels;\n    text._gpuData[this._renderer.uid] = batchableText;\n    return batchableText;\n  }\n  destroy() {\n    this._renderer = null;\n  }\n}\n/** @ignore */\nCanvasTextPipe.extension = {\n  type: [\n    ExtensionType.WebGLPipes,\n    ExtensionType.WebGPUPipes,\n    ExtensionType.CanvasPipes\n  ],\n  name: \"text\"\n};\n\nexport { CanvasTextPipe };\n//# sourceMappingURL=CanvasTextPipe.mjs.map\n","import { ExtensionType } from '../../../extensions/Extensions.mjs';\nimport { TexturePool } from '../../../rendering/renderers/shared/texture/TexturePool.mjs';\nimport { TextureStyle } from '../../../rendering/renderers/shared/texture/TextureStyle.mjs';\nimport { deprecation } from '../../../utils/logging/deprecation.mjs';\nimport { TextStyle } from '../TextStyle.mjs';\nimport { getPo2TextureFromSource } from '../utils/getPo2TextureFromSource.mjs';\nimport { CanvasTextGenerator } from './CanvasTextGenerator.mjs';\n\n\"use strict\";\nclass CanvasTextSystem {\n  constructor(_renderer) {\n    this._activeTextures = {};\n    this._renderer = _renderer;\n  }\n  getTexture(options, _resolution, _style, _textKey) {\n    if (typeof options === \"string\") {\n      deprecation(\"8.0.0\", \"CanvasTextSystem.getTexture: Use object TextOptions instead of separate arguments\");\n      options = {\n        text: options,\n        style: _style,\n        resolution: _resolution\n      };\n    }\n    if (!(options.style instanceof TextStyle)) {\n      options.style = new TextStyle(options.style);\n    }\n    if (!(options.textureStyle instanceof TextureStyle)) {\n      options.textureStyle = new TextureStyle(options.textureStyle);\n    }\n    if (typeof options.text !== \"string\") {\n      options.text = options.text.toString();\n    }\n    const { text, style, textureStyle } = options;\n    const resolution = options.resolution ?? this._renderer.resolution;\n    const { frame, canvasAndContext } = CanvasTextGenerator.getCanvasAndContext({\n      text,\n      style,\n      resolution\n    });\n    const texture = getPo2TextureFromSource(canvasAndContext.canvas, frame.width, frame.height, resolution);\n    if (textureStyle)\n      texture.source.style = textureStyle;\n    if (style.trim) {\n      frame.pad(style.padding);\n      texture.frame.copyFrom(frame);\n      texture.frame.scale(1 / resolution);\n      texture.updateUvs();\n    }\n    if (style.filters) {\n      const filteredTexture = this._applyFilters(texture, style.filters);\n      this.returnTexture(texture);\n      CanvasTextGenerator.returnCanvasAndContext(canvasAndContext);\n      return filteredTexture;\n    }\n    this._renderer.texture.initSource(texture._source);\n    CanvasTextGenerator.returnCanvasAndContext(canvasAndContext);\n    return texture;\n  }\n  /**\n   * Returns a texture that was created wit the above `getTexture` function.\n   * Handy if you are done with a texture and want to return it to the pool.\n   * @param texture - The texture to be returned.\n   */\n  returnTexture(texture) {\n    const source = texture.source;\n    source.resource = null;\n    source.uploadMethodId = \"unknown\";\n    source.alphaMode = \"no-premultiply-alpha\";\n    TexturePool.returnTexture(texture, true);\n  }\n  /**\n   * Renders text to its canvas, and updates its texture.\n   * @deprecated since 8.10.0\n   */\n  renderTextToCanvas() {\n    deprecation(\n      \"8.10.0\",\n      \"CanvasTextSystem.renderTextToCanvas: no longer supported, use CanvasTextSystem.getTexture instead\"\n    );\n  }\n  /**\n   * Gets or creates a managed texture for a Text object. This method handles texture reuse and reference counting.\n   * @param text - The Text object that needs a texture\n   * @returns A Texture instance that represents the rendered text\n   * @remarks\n   * This method performs the following:\n   * 1. Sets the appropriate resolution based on auto-resolution settings\n   * 2. Checks if a texture already exists for the text's style\n   * 3. Creates a new texture if needed or returns an existing one\n   * 4. Manages reference counting for texture reuse\n   */\n  getManagedTexture(text) {\n    text._resolution = text._autoResolution ? this._renderer.resolution : text.resolution;\n    const textKey = text.styleKey;\n    if (this._activeTextures[textKey]) {\n      this._increaseReferenceCount(textKey);\n      return this._activeTextures[textKey].texture;\n    }\n    const texture = this.getTexture({\n      text: text.text,\n      style: text.style,\n      resolution: text._resolution,\n      textureStyle: text.textureStyle\n    });\n    this._activeTextures[textKey] = {\n      texture,\n      usageCount: 1\n    };\n    return texture;\n  }\n  /**\n   * Decreases the reference count for a texture associated with a text key.\n   * When the reference count reaches zero, the texture is returned to the pool.\n   * @param textKey - The unique key identifying the text style configuration\n   * @remarks\n   * This method is crucial for memory management, ensuring textures are properly\n   * cleaned up when they are no longer needed by any Text instances.\n   */\n  decreaseReferenceCount(textKey) {\n    const activeTexture = this._activeTextures[textKey];\n    activeTexture.usageCount--;\n    if (activeTexture.usageCount === 0) {\n      this.returnTexture(activeTexture.texture);\n      this._activeTextures[textKey] = null;\n    }\n  }\n  /**\n   * Gets the current reference count for a texture associated with a text key.\n   * @param textKey - The unique key identifying the text style configuration\n   * @returns The number of Text instances currently using this texture\n   */\n  getReferenceCount(textKey) {\n    return this._activeTextures[textKey]?.usageCount ?? 0;\n  }\n  _increaseReferenceCount(textKey) {\n    this._activeTextures[textKey].usageCount++;\n  }\n  /**\n   * Applies the specified filters to the given texture.\n   *\n   * This method takes a texture and a list of filters, applies the filters to the texture,\n   * and returns the resulting texture. It also ensures that the alpha mode of the resulting\n   * texture is set to 'premultiplied-alpha'.\n   * @param {Texture} texture - The texture to which the filters will be applied.\n   * @param {Filter[]} filters - The filters to apply to the texture.\n   * @returns {Texture} The resulting texture after all filters have been applied.\n   */\n  _applyFilters(texture, filters) {\n    const currentRenderTarget = this._renderer.renderTarget.renderTarget;\n    const resultTexture = this._renderer.filter.generateFilteredTexture({\n      texture,\n      filters\n    });\n    this._renderer.renderTarget.bind(currentRenderTarget, false);\n    return resultTexture;\n  }\n  destroy() {\n    this._renderer = null;\n    for (const key in this._activeTextures) {\n      if (this._activeTextures[key])\n        this.returnTexture(this._activeTextures[key].texture);\n    }\n    this._activeTextures = null;\n  }\n}\n/** @ignore */\nCanvasTextSystem.extension = {\n  type: [\n    ExtensionType.WebGLSystem,\n    ExtensionType.WebGPUSystem,\n    ExtensionType.CanvasSystem\n  ],\n  name: \"canvasText\"\n};\n\nexport { CanvasTextSystem };\n//# sourceMappingURL=CanvasTextSystem.mjs.map\n","import { extensions } from '../extensions/Extensions.mjs';\nimport { ResizePlugin } from './ResizePlugin.mjs';\nimport { TickerPlugin } from './TickerPlugin.mjs';\n\n\"use strict\";\nextensions.add(ResizePlugin);\nextensions.add(TickerPlugin);\n//# sourceMappingURL=init.mjs.map\n","import { extensions } from '../../extensions/Extensions.mjs';\nimport { GraphicsContextSystem } from './shared/GraphicsContextSystem.mjs';\nimport { GraphicsPipe } from './shared/GraphicsPipe.mjs';\n\n\"use strict\";\nextensions.add(GraphicsPipe);\nextensions.add(GraphicsContextSystem);\n//# sourceMappingURL=init.mjs.map\n","import { extensions } from '../../extensions/Extensions.mjs';\nimport { MeshPipe } from './shared/MeshPipe.mjs';\n\n\"use strict\";\nextensions.add(MeshPipe);\n//# sourceMappingURL=init.mjs.map\n","import { extensions } from '../../extensions/Extensions.mjs';\nimport { GlParticleContainerPipe } from './shared/GlParticleContainerPipe.mjs';\nimport { GpuParticleContainerPipe } from './shared/GpuParticleContainerPipe.mjs';\n\n\"use strict\";\nextensions.add(GlParticleContainerPipe);\nextensions.add(GpuParticleContainerPipe);\n//# sourceMappingURL=init.mjs.map\n","import { extensions } from '../../extensions/Extensions.mjs';\nimport { CanvasTextPipe } from './canvas/CanvasTextPipe.mjs';\nimport { CanvasTextSystem } from './canvas/CanvasTextSystem.mjs';\n\n\"use strict\";\nextensions.add(CanvasTextSystem);\nextensions.add(CanvasTextPipe);\n//# sourceMappingURL=init.mjs.map\n","import { extensions } from '../../extensions/Extensions.mjs';\nimport { BitmapTextPipe } from './BitmapTextPipe.mjs';\n\n\"use strict\";\nextensions.add(BitmapTextPipe);\n//# sourceMappingURL=init.mjs.map\n","import { extensions } from '../../extensions/Extensions.mjs';\nimport { HTMLTextPipe } from './HTMLTextPipe.mjs';\nimport { HTMLTextSystem } from './HTMLTextSystem.mjs';\n\n\"use strict\";\nextensions.add(HTMLTextSystem);\nextensions.add(HTMLTextPipe);\n//# sourceMappingURL=init.mjs.map\n","import { extensions } from '../../extensions/Extensions.mjs';\nimport { TilingSpritePipe } from './TilingSpritePipe.mjs';\n\n\"use strict\";\nextensions.add(TilingSpritePipe);\n//# sourceMappingURL=init.mjs.map\n","import { extensions } from '../../extensions/Extensions.mjs';\nimport { NineSliceSpritePipe } from './NineSliceSpritePipe.mjs';\n\n\"use strict\";\nextensions.add(NineSliceSpritePipe);\n//# sourceMappingURL=init.mjs.map\n","import { extensions } from '../extensions/Extensions.mjs';\nimport { FilterPipe } from './FilterPipe.mjs';\nimport { FilterSystem } from './FilterSystem.mjs';\n\n\"use strict\";\nextensions.add(FilterSystem);\nextensions.add(FilterPipe);\n//# sourceMappingURL=init.mjs.map\n"],"names":["ResizePlugin","options","dom","width","height","clientWidth","clientHeight","ExtensionType","TickerPlugin","ticker","UPDATE_PRIORITY","Ticker","oldTicker","AbstractBitmapFont","EventEmitter","deprecation","v8_0_0","destroyTextures","i","page","_DynamicBitmapFont","dynamicOptions","style","Texture","requestedFontSize","font","fontStringFromTextStyle","TextureStyle","CanvasTextMetrics","chars","charList","char","index","self","pageData","canvas","context","textureSource","currentX","currentY","currentMaxCharHeight","fontScale","padding","skipTexture","maxTextureWidth","maxTextureHeight","metrics","textureGlyphWidth","paddedWidth","paddedHeight","pageData2","xAdvance","px","py","frame","Rectangle","newChars","measureCache","first","j","second","c1","c2","total","amount","textureResolution","canvasAndContext","CanvasPool","resolution","texture","ImageSource","stroke","strokeThickness","getCanvasFillStyle","shadowOptions","rgb","Color","dropShadowBlur","dropShadowDistance","x","y","fontProperties","tx","ty","descent","lineHeight","removeShadow","shadowBlur","shadowOffsetX","shadowOffsetY","TextStyle","DynamicBitmapFont","getBitmapTextLayout","trimEnd","layoutData","currentLine","previousChar","firstWord","currentWord","scale","adjustedLetterSpacing","adjustedWordWrapWidth","adjustedLineHeight","breakWords","nextWord","word","start","position","nextLine","lastChar","checkIsOverflow","lineWidth","isEnd","charData","spaceWidth","kerning","nextCharWidth","alignCenter","alignRight","alignJustify","measurementData","line","offset","indy","spaceIndex","totalSpaces","resolveCharacters","result","item","startCode","endCode","i2","j2","fontCount","BitmapFontManagerClass","lru","text","fontFamilyKey","overrideFill","Cache","styleCopy","fnt","warn","dynamicFont","bitmapFont","id","segments","args","name","textStyle","flatChars","cacheKey","BitmapFontManager","FilterPipe","renderer","filterEffect","container","instructionSet","_filterEffect","_container","instruction","tempProjectionMatrix","Matrix","getGlobalRenderableBounds","renderables","bounds","actualMatrix","renderable","renderGroup","quadGeometry","Geometry","FilterData","Bounds","FilterSystem","UniformGroup","BindGroup","filters","filterData","colorTextureSource","rootResolution","rootAntialias","previousFilterData","globalResolution","offsetX","offsetY","TexturePool","outputTexture","lastRenderSurface","previousBounds","backgroundResolution","backTexture","filter","input","output","clear","isFinalTarget","outputMatrix","sprite","data","mappedMatrix","worldTransform","batchUniforms","RendererType","renderTarget","sourceWidth","sourceHeight","globalFrame","uniforms","outputFrame","inputSize","inputPixel","inputClamp","rootTexture","currentIndex","lastIndex","prevFilterData","filterFrameTransform","inputTexture","flip","tempTexture","flop","t","viewPort","paddingMultiplier","antialias","blendRequired","enabled","clipToViewport","_MeshGeometry","positions","uvs","indices","shrinkToFit","positionBuffer","Buffer","BufferUsage","uvBuffer","indexBuffer","value","MeshGeometry","nssvg","nsxhtml","HTMLTextRenderData","foreignObject","svgRoot","styleElement","domElement","DOMAdapter","tempHTMLTextRenderData","measureHtmlText","fontStyleCSS","htmlTextRenderData","contentBounds","doublePadding","GraphicsGpuData","batch","BigPool","GraphicsPipe","adaptor","State","graphics","wasBatched","gpuContext","batches","shader","localUniforms","color32BitToUniform","gpuData","batchPipe","roundPixels","batchClone","BatchableGraphics","_PlaneGeometry","verts","verticesX","verticesY","sizeX","sizeY","totalSub","xpos","ypos","value2","value3","value4","PlaneGeometry","BatchableMesh","transformedUvs","textureMatrix","MeshGpuData","MeshPipe","mesh","meshData","isBatched","geometry","batchableMesh","batcher","gpuBatchableMesh","getAdjustedBlendModeBlend","_a","_b","gpuMesh","GlParticleContainerAdaptor","particleContainerPipe","state","gl","buffer","glType","GpuParticleContainerAdaptor","createIndicesForQuads","size","outBuffer","totalIndices","generateParticleUpdateFunction","properties","generateUpdateFunction","dynamic","funcFragments","property","attributeInfo","getAttributeInfoFromFormat","functionSource","ParticleBuffer","staticVertexSize","dynamicVertexSize","ViewableBuffer","dynamicOffset","staticOffset","uploadFunction","key","getParticleSyncKey","particles","uploadStatic","dynamicAttributeBuffer","staticAttributeBuffer","keyGen","fragment","vertex","wgsl","ParticleShader","Shader","glProgram","GlProgram","gpuProgram","GpuProgram","ParticleContainerPipe","_renderable","children","transformationMatrix","GlParticleContainerPipe","GpuParticleContainerPipe","_NineSliceGeometry","p","_leftWidth","_rightWidth","_topHeight","_bottomHeight","_anchorX","_anchorY","w","scaleW","scaleH","anchorOffsetX","anchorOffsetY","_uvw","_uvh","NineSliceGeometry","NineSliceSpriteGpuData","NineSliceSpritePipe","gpuSprite","batchableSprite","tilingBit","tilingBitGl","TilingSpriteShader","compileHighShaderGpuProgram","localUniformBit","roundPixelsBit","compileHighShaderGlProgram","localUniformBitGl","roundPixelsBitGl","tilingUniforms","matrix","anchorX","anchorY","textureWidth","textureHeight","uTextureTransform","QuadGeometry","setPositions","tilingSprite","applyMatrix","array","stride","a","b","c","d","setUvs","sharedQuad","TilingSpriteGpuData","TilingSpritePipe","tilingSpriteData","couldBatch","canBatch","renderableData","_nonPowOf2wrapping","localUniformMSDFBit","localUniformMSDFBitGl","mSDFBit","mSDFBitGl","SdfShader","maxTextures","colorBit","generateTextureBatchBit","colorBitGl","generateTextureBatchBitGl","getBatchSamplersUniformGroup","BitmapTextGraphics","Graphics","BitmapTextPipe","bitmapText","graphicsRenderable","syncWithProxy","proxyGraphics","bitmapTextLayout","tint","fontSize","linePositionYShift","proxyRenderable","fontFamily","dx","dy","worldScale","distance","proxy","BatchableHTMLText","BatchableSprite","htmlText","updateTextBounds","updateQuadBounds","paddingOffset","paddingOffsetY","HTMLTextPipe","gpuText","newKey","batchableHTMLText","e","oldTexturePromise","texturePromise","isSafari","userAgent","tempBounds","getPo2TextureFromSource","image","extractFontFamilies","fontFamilies","dedupe","regex","matches","addFontFamily","fontFamily2","match","loadFontAsBase64","url","blob","reader","resolve","reject","loadFontCSS","dataSrc","FontStylePromiseCache","getFontCss","fontPromises","entries","promises","entry","out","face","css","getSVGUrl","fontCSS","htmlTextData","getTemporaryCanvasFromImage","loadSVGImage","delay","resolve2","HTMLTextSystem","textKey","promise","activeTexture","textureStyle","measured","uvSafeOffset","svgURL","resource","BatchableText","canvasText","CanvasTextPipe","batchableText","CanvasTextSystem","_renderer","_resolution","_style","_textKey","CanvasTextGenerator","filteredTexture","source","currentRenderTarget","resultTexture","extensions","GraphicsContextSystem"],"mappings":"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","x_google_ignoreList":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67]}